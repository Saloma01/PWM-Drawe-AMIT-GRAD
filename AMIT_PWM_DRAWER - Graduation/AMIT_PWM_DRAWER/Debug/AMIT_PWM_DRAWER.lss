
AMIT_PWM_DRAWER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  000017e6  0000187a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000b4  008000b4  000018ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001900  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000251d  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c85  00000000  00000000  00004001  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011cc  00000000  00000000  00004c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  00005e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c54  00000000  00000000  000062ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000160e  00000000  00000000  00006f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000850e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__ctors_end>
       4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      48:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      54:	45 04       	cpc	r4, r5
      56:	c8 04       	cpc	r12, r8
      58:	c8 04       	cpc	r12, r8
      5a:	c8 04       	cpc	r12, r8
      5c:	c8 04       	cpc	r12, r8
      5e:	24 04       	cpc	r2, r4
      60:	c8 04       	cpc	r12, r8
      62:	c8 04       	cpc	r12, r8
      64:	c8 04       	cpc	r12, r8
      66:	c8 04       	cpc	r12, r8
      68:	c8 04       	cpc	r12, r8
      6a:	c8 04       	cpc	r12, r8
      6c:	c8 04       	cpc	r12, r8
      6e:	50 04       	cpc	r5, r0
      70:	3a 04       	cpc	r3, r10
      72:	c8 04       	cpc	r12, r8
      74:	5b 04       	cpc	r5, r11
      76:	66 04       	cpc	r6, r6
      78:	71 04       	cpc	r7, r1
      7a:	7c 04       	cpc	r7, r12
      7c:	87 04       	cpc	r8, r7
      7e:	92 04       	cpc	r9, r2
      80:	9d 04       	cpc	r9, r13
      82:	a8 04       	cpc	r10, r8
      84:	b3 04       	cpc	r11, r3
      86:	be 04       	cpc	r11, r14
      88:	c8 04       	cpc	r12, r8
      8a:	c8 04       	cpc	r12, r8
      8c:	c8 04       	cpc	r12, r8
      8e:	2f 04       	cpc	r2, r15
      90:	c8 04       	cpc	r12, r8
      92:	c8 04       	cpc	r12, r8
      94:	c8 04       	cpc	r12, r8
      96:	06 03       	mulsu	r16, r22
      98:	11 03       	mulsu	r17, r17
      9a:	1c 03       	fmul	r17, r20
      9c:	27 03       	mulsu	r18, r23
      9e:	32 03       	mulsu	r19, r18
      a0:	3d 03       	fmul	r19, r21
      a2:	48 03       	fmul	r20, r16
      a4:	53 03       	mulsu	r21, r19
      a6:	5e 03       	fmul	r21, r22
      a8:	69 03       	fmul	r22, r17
      aa:	74 03       	mulsu	r23, r20
      ac:	7f 03       	fmul	r23, r23
      ae:	8a 03       	fmulsu	r16, r18
      b0:	95 03       	fmuls	r17, r21
      b2:	a0 03       	fmuls	r18, r16
      b4:	ab 03       	fmulsu	r18, r19
      b6:	b6 03       	fmuls	r19, r22
      b8:	c1 03       	fmuls	r20, r17
      ba:	cc 03       	fmulsu	r20, r20
      bc:	d7 03       	fmuls	r21, r23
      be:	e2 03       	fmuls	r22, r18
      c0:	ed 03       	fmulsu	r22, r21
      c2:	f8 03       	fmulsu	r23, r16
      c4:	03 04       	cpc	r0, r3
      c6:	0e 04       	cpc	r0, r14
      c8:	19 04       	cpc	r1, r9
      ca:	c8 04       	cpc	r12, r8
      cc:	c8 04       	cpc	r12, r8
      ce:	c8 04       	cpc	r12, r8
      d0:	c8 04       	cpc	r12, r8
      d2:	c8 04       	cpc	r12, r8
      d4:	c8 04       	cpc	r12, r8
      d6:	06 03       	mulsu	r16, r22
      d8:	11 03       	mulsu	r17, r17
      da:	1c 03       	fmul	r17, r20
      dc:	27 03       	mulsu	r18, r23
      de:	32 03       	mulsu	r19, r18
      e0:	3d 03       	fmul	r19, r21
      e2:	48 03       	fmul	r20, r16
      e4:	53 03       	mulsu	r21, r19
      e6:	5e 03       	fmul	r21, r22
      e8:	69 03       	fmul	r22, r17
      ea:	74 03       	mulsu	r23, r20
      ec:	7f 03       	fmul	r23, r23
      ee:	8a 03       	fmulsu	r16, r18
      f0:	95 03       	fmuls	r17, r21
      f2:	a0 03       	fmuls	r18, r16
      f4:	ab 03       	fmulsu	r18, r19
      f6:	b6 03       	fmuls	r19, r22
      f8:	c1 03       	fmuls	r20, r17
      fa:	cc 03       	fmulsu	r20, r20
      fc:	d7 03       	fmuls	r21, r23
      fe:	e2 03       	fmuls	r22, r18
     100:	ed 03       	fmulsu	r22, r21
     102:	f8 03       	fmulsu	r23, r16
     104:	03 04       	cpc	r0, r3
     106:	0e 04       	cpc	r0, r14
     108:	19 04       	cpc	r1, r9
     10a:	02 09       	sbc	r16, r2
     10c:	02 09       	sbc	r16, r2
     10e:	06 09       	sbc	r16, r6
     110:	0a 09       	sbc	r16, r10
     112:	0e 09       	sbc	r16, r14
     114:	12 09       	sbc	r17, r2
     116:	16 09       	sbc	r17, r6
     118:	16 09       	sbc	r17, r6

0000011a <__ctors_end>:
     11a:	11 24       	eor	r1, r1
     11c:	1f be       	out	0x3f, r1	; 63
     11e:	cf e5       	ldi	r28, 0x5F	; 95
     120:	d8 e0       	ldi	r29, 0x08	; 8
     122:	de bf       	out	0x3e, r29	; 62
     124:	cd bf       	out	0x3d, r28	; 61

00000126 <__do_copy_data>:
     126:	10 e0       	ldi	r17, 0x00	; 0
     128:	a0 e6       	ldi	r26, 0x60	; 96
     12a:	b0 e0       	ldi	r27, 0x00	; 0
     12c:	e6 ee       	ldi	r30, 0xE6	; 230
     12e:	f7 e1       	ldi	r31, 0x17	; 23
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x10>
     132:	05 90       	lpm	r0, Z+
     134:	0d 92       	st	X+, r0
     136:	a4 3b       	cpi	r26, 0xB4	; 180
     138:	b1 07       	cpc	r27, r17
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0xc>

0000013c <__do_clear_bss>:
     13c:	20 e0       	ldi	r18, 0x00	; 0
     13e:	a4 eb       	ldi	r26, 0xB4	; 180
     140:	b0 e0       	ldi	r27, 0x00	; 0
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
     146:	a7 3b       	cpi	r26, 0xB7	; 183
     148:	b2 07       	cpc	r27, r18
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
     14c:	0e 94 c4 06 	call	0xd88	; 0xd88 <main>
     150:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <_exit>

00000154 <__bad_interrupt>:
     154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <DIO_setPinDirection>:
     158:	84 30       	cpi	r24, 0x04	; 4
     15a:	08 f0       	brcs	.+2      	; 0x15e <DIO_setPinDirection+0x6>
     15c:	72 c0       	rjmp	.+228    	; 0x242 <DIO_setPinDirection+0xea>
     15e:	68 30       	cpi	r22, 0x08	; 8
     160:	08 f0       	brcs	.+2      	; 0x164 <DIO_setPinDirection+0xc>
     162:	6f c0       	rjmp	.+222    	; 0x242 <DIO_setPinDirection+0xea>
     164:	42 30       	cpi	r20, 0x02	; 2
     166:	08 f0       	brcs	.+2      	; 0x16a <DIO_setPinDirection+0x12>
     168:	6c c0       	rjmp	.+216    	; 0x242 <DIO_setPinDirection+0xea>
     16a:	81 30       	cpi	r24, 0x01	; 1
     16c:	01 f1       	breq	.+64     	; 0x1ae <DIO_setPinDirection+0x56>
     16e:	30 f0       	brcs	.+12     	; 0x17c <DIO_setPinDirection+0x24>
     170:	82 30       	cpi	r24, 0x02	; 2
     172:	b1 f1       	breq	.+108    	; 0x1e0 <DIO_setPinDirection+0x88>
     174:	83 30       	cpi	r24, 0x03	; 3
     176:	09 f4       	brne	.+2      	; 0x17a <DIO_setPinDirection+0x22>
     178:	4c c0       	rjmp	.+152    	; 0x212 <DIO_setPinDirection+0xba>
     17a:	08 95       	ret
     17c:	41 30       	cpi	r20, 0x01	; 1
     17e:	59 f4       	brne	.+22     	; 0x196 <DIO_setPinDirection+0x3e>
     180:	2a b3       	in	r18, 0x1a	; 26
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_setPinDirection+0x34>
     188:	88 0f       	add	r24, r24
     18a:	99 1f       	adc	r25, r25
     18c:	6a 95       	dec	r22
     18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_setPinDirection+0x30>
     190:	82 2b       	or	r24, r18
     192:	8a bb       	out	0x1a, r24	; 26
     194:	08 95       	ret
     196:	2a b3       	in	r18, 0x1a	; 26
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setPinDirection+0x4a>
     19e:	88 0f       	add	r24, r24
     1a0:	99 1f       	adc	r25, r25
     1a2:	6a 95       	dec	r22
     1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setPinDirection+0x46>
     1a6:	80 95       	com	r24
     1a8:	82 23       	and	r24, r18
     1aa:	8a bb       	out	0x1a, r24	; 26
     1ac:	08 95       	ret
     1ae:	41 30       	cpi	r20, 0x01	; 1
     1b0:	59 f4       	brne	.+22     	; 0x1c8 <DIO_setPinDirection+0x70>
     1b2:	27 b3       	in	r18, 0x17	; 23
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_setPinDirection+0x66>
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	6a 95       	dec	r22
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_setPinDirection+0x62>
     1c2:	82 2b       	or	r24, r18
     1c4:	87 bb       	out	0x17, r24	; 23
     1c6:	08 95       	ret
     1c8:	27 b3       	in	r18, 0x17	; 23
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_setPinDirection+0x7c>
     1d0:	88 0f       	add	r24, r24
     1d2:	99 1f       	adc	r25, r25
     1d4:	6a 95       	dec	r22
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_setPinDirection+0x78>
     1d8:	80 95       	com	r24
     1da:	82 23       	and	r24, r18
     1dc:	87 bb       	out	0x17, r24	; 23
     1de:	08 95       	ret
     1e0:	41 30       	cpi	r20, 0x01	; 1
     1e2:	59 f4       	brne	.+22     	; 0x1fa <DIO_setPinDirection+0xa2>
     1e4:	24 b3       	in	r18, 0x14	; 20
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_setPinDirection+0x98>
     1ec:	88 0f       	add	r24, r24
     1ee:	99 1f       	adc	r25, r25
     1f0:	6a 95       	dec	r22
     1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_setPinDirection+0x94>
     1f4:	82 2b       	or	r24, r18
     1f6:	84 bb       	out	0x14, r24	; 20
     1f8:	08 95       	ret
     1fa:	24 b3       	in	r18, 0x14	; 20
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_setPinDirection+0xae>
     202:	88 0f       	add	r24, r24
     204:	99 1f       	adc	r25, r25
     206:	6a 95       	dec	r22
     208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_setPinDirection+0xaa>
     20a:	80 95       	com	r24
     20c:	82 23       	and	r24, r18
     20e:	84 bb       	out	0x14, r24	; 20
     210:	08 95       	ret
     212:	41 30       	cpi	r20, 0x01	; 1
     214:	59 f4       	brne	.+22     	; 0x22c <DIO_setPinDirection+0xd4>
     216:	21 b3       	in	r18, 0x11	; 17
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_setPinDirection+0xca>
     21e:	88 0f       	add	r24, r24
     220:	99 1f       	adc	r25, r25
     222:	6a 95       	dec	r22
     224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_setPinDirection+0xc6>
     226:	82 2b       	or	r24, r18
     228:	81 bb       	out	0x11, r24	; 17
     22a:	08 95       	ret
     22c:	21 b3       	in	r18, 0x11	; 17
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_setPinDirection+0xe0>
     234:	88 0f       	add	r24, r24
     236:	99 1f       	adc	r25, r25
     238:	6a 95       	dec	r22
     23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_setPinDirection+0xdc>
     23c:	80 95       	com	r24
     23e:	82 23       	and	r24, r18
     240:	81 bb       	out	0x11, r24	; 17
     242:	08 95       	ret

00000244 <DIO_setPinValue>:
     244:	84 30       	cpi	r24, 0x04	; 4
     246:	08 f0       	brcs	.+2      	; 0x24a <DIO_setPinValue+0x6>
     248:	72 c0       	rjmp	.+228    	; 0x32e <DIO_setPinValue+0xea>
     24a:	68 30       	cpi	r22, 0x08	; 8
     24c:	08 f0       	brcs	.+2      	; 0x250 <DIO_setPinValue+0xc>
     24e:	6f c0       	rjmp	.+222    	; 0x32e <DIO_setPinValue+0xea>
     250:	42 30       	cpi	r20, 0x02	; 2
     252:	08 f0       	brcs	.+2      	; 0x256 <DIO_setPinValue+0x12>
     254:	6c c0       	rjmp	.+216    	; 0x32e <DIO_setPinValue+0xea>
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	01 f1       	breq	.+64     	; 0x29a <DIO_setPinValue+0x56>
     25a:	30 f0       	brcs	.+12     	; 0x268 <DIO_setPinValue+0x24>
     25c:	82 30       	cpi	r24, 0x02	; 2
     25e:	b1 f1       	breq	.+108    	; 0x2cc <DIO_setPinValue+0x88>
     260:	83 30       	cpi	r24, 0x03	; 3
     262:	09 f4       	brne	.+2      	; 0x266 <DIO_setPinValue+0x22>
     264:	4c c0       	rjmp	.+152    	; 0x2fe <DIO_setPinValue+0xba>
     266:	08 95       	ret
     268:	41 30       	cpi	r20, 0x01	; 1
     26a:	59 f4       	brne	.+22     	; 0x282 <DIO_setPinValue+0x3e>
     26c:	2b b3       	in	r18, 0x1b	; 27
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_setPinValue+0x34>
     274:	88 0f       	add	r24, r24
     276:	99 1f       	adc	r25, r25
     278:	6a 95       	dec	r22
     27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_setPinValue+0x30>
     27c:	82 2b       	or	r24, r18
     27e:	8b bb       	out	0x1b, r24	; 27
     280:	08 95       	ret
     282:	2b b3       	in	r18, 0x1b	; 27
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_setPinValue+0x4a>
     28a:	88 0f       	add	r24, r24
     28c:	99 1f       	adc	r25, r25
     28e:	6a 95       	dec	r22
     290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_setPinValue+0x46>
     292:	80 95       	com	r24
     294:	82 23       	and	r24, r18
     296:	8b bb       	out	0x1b, r24	; 27
     298:	08 95       	ret
     29a:	41 30       	cpi	r20, 0x01	; 1
     29c:	59 f4       	brne	.+22     	; 0x2b4 <DIO_setPinValue+0x70>
     29e:	28 b3       	in	r18, 0x18	; 24
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_setPinValue+0x66>
     2a6:	88 0f       	add	r24, r24
     2a8:	99 1f       	adc	r25, r25
     2aa:	6a 95       	dec	r22
     2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_setPinValue+0x62>
     2ae:	82 2b       	or	r24, r18
     2b0:	88 bb       	out	0x18, r24	; 24
     2b2:	08 95       	ret
     2b4:	28 b3       	in	r18, 0x18	; 24
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_setPinValue+0x7c>
     2bc:	88 0f       	add	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	6a 95       	dec	r22
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_setPinValue+0x78>
     2c4:	80 95       	com	r24
     2c6:	82 23       	and	r24, r18
     2c8:	88 bb       	out	0x18, r24	; 24
     2ca:	08 95       	ret
     2cc:	41 30       	cpi	r20, 0x01	; 1
     2ce:	59 f4       	brne	.+22     	; 0x2e6 <DIO_setPinValue+0xa2>
     2d0:	25 b3       	in	r18, 0x15	; 21
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_setPinValue+0x98>
     2d8:	88 0f       	add	r24, r24
     2da:	99 1f       	adc	r25, r25
     2dc:	6a 95       	dec	r22
     2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_setPinValue+0x94>
     2e0:	82 2b       	or	r24, r18
     2e2:	85 bb       	out	0x15, r24	; 21
     2e4:	08 95       	ret
     2e6:	25 b3       	in	r18, 0x15	; 21
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_setPinValue+0xae>
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	6a 95       	dec	r22
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_setPinValue+0xaa>
     2f6:	80 95       	com	r24
     2f8:	82 23       	and	r24, r18
     2fa:	85 bb       	out	0x15, r24	; 21
     2fc:	08 95       	ret
     2fe:	41 30       	cpi	r20, 0x01	; 1
     300:	59 f4       	brne	.+22     	; 0x318 <DIO_setPinValue+0xd4>
     302:	22 b3       	in	r18, 0x12	; 18
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_setPinValue+0xca>
     30a:	88 0f       	add	r24, r24
     30c:	99 1f       	adc	r25, r25
     30e:	6a 95       	dec	r22
     310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_setPinValue+0xc6>
     312:	82 2b       	or	r24, r18
     314:	82 bb       	out	0x12, r24	; 18
     316:	08 95       	ret
     318:	22 b3       	in	r18, 0x12	; 18
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_setPinValue+0xe0>
     320:	88 0f       	add	r24, r24
     322:	99 1f       	adc	r25, r25
     324:	6a 95       	dec	r22
     326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_setPinValue+0xdc>
     328:	80 95       	com	r24
     32a:	82 23       	and	r24, r18
     32c:	82 bb       	out	0x12, r24	; 18
     32e:	08 95       	ret

00000330 <DIO_setPortDirection>:
     330:	84 30       	cpi	r24, 0x04	; 4
     332:	38 f5       	brcc	.+78     	; 0x382 <DIO_setPortDirection+0x52>
     334:	9f ef       	ldi	r25, 0xFF	; 255
     336:	96 0f       	add	r25, r22
     338:	9e 3f       	cpi	r25, 0xFE	; 254
     33a:	18 f1       	brcs	.+70     	; 0x382 <DIO_setPortDirection+0x52>
     33c:	81 30       	cpi	r24, 0x01	; 1
     33e:	69 f0       	breq	.+26     	; 0x35a <DIO_setPortDirection+0x2a>
     340:	28 f0       	brcs	.+10     	; 0x34c <DIO_setPortDirection+0x1c>
     342:	82 30       	cpi	r24, 0x02	; 2
     344:	89 f0       	breq	.+34     	; 0x368 <DIO_setPortDirection+0x38>
     346:	83 30       	cpi	r24, 0x03	; 3
     348:	b1 f0       	breq	.+44     	; 0x376 <DIO_setPortDirection+0x46>
     34a:	08 95       	ret
     34c:	6f 3f       	cpi	r22, 0xFF	; 255
     34e:	19 f4       	brne	.+6      	; 0x356 <DIO_setPortDirection+0x26>
     350:	8f ef       	ldi	r24, 0xFF	; 255
     352:	8a bb       	out	0x1a, r24	; 26
     354:	08 95       	ret
     356:	1a ba       	out	0x1a, r1	; 26
     358:	08 95       	ret
     35a:	6f 3f       	cpi	r22, 0xFF	; 255
     35c:	19 f4       	brne	.+6      	; 0x364 <DIO_setPortDirection+0x34>
     35e:	8f ef       	ldi	r24, 0xFF	; 255
     360:	87 bb       	out	0x17, r24	; 23
     362:	08 95       	ret
     364:	17 ba       	out	0x17, r1	; 23
     366:	08 95       	ret
     368:	6f 3f       	cpi	r22, 0xFF	; 255
     36a:	19 f4       	brne	.+6      	; 0x372 <DIO_setPortDirection+0x42>
     36c:	8f ef       	ldi	r24, 0xFF	; 255
     36e:	84 bb       	out	0x14, r24	; 20
     370:	08 95       	ret
     372:	14 ba       	out	0x14, r1	; 20
     374:	08 95       	ret
     376:	6f 3f       	cpi	r22, 0xFF	; 255
     378:	19 f4       	brne	.+6      	; 0x380 <DIO_setPortDirection+0x50>
     37a:	8f ef       	ldi	r24, 0xFF	; 255
     37c:	81 bb       	out	0x11, r24	; 17
     37e:	08 95       	ret
     380:	11 ba       	out	0x11, r1	; 17
     382:	08 95       	ret

00000384 <DIO_setPortValue>:
     384:	84 30       	cpi	r24, 0x04	; 4
     386:	78 f4       	brcc	.+30     	; 0x3a6 <DIO_setPortValue+0x22>
     388:	81 30       	cpi	r24, 0x01	; 1
     38a:	41 f0       	breq	.+16     	; 0x39c <DIO_setPortValue+0x18>
     38c:	28 f0       	brcs	.+10     	; 0x398 <DIO_setPortValue+0x14>
     38e:	82 30       	cpi	r24, 0x02	; 2
     390:	39 f0       	breq	.+14     	; 0x3a0 <DIO_setPortValue+0x1c>
     392:	83 30       	cpi	r24, 0x03	; 3
     394:	39 f0       	breq	.+14     	; 0x3a4 <DIO_setPortValue+0x20>
     396:	08 95       	ret
     398:	6b bb       	out	0x1b, r22	; 27
     39a:	08 95       	ret
     39c:	68 bb       	out	0x18, r22	; 24
     39e:	08 95       	ret
     3a0:	65 bb       	out	0x15, r22	; 21
     3a2:	08 95       	ret
     3a4:	62 bb       	out	0x12, r22	; 18
     3a6:	08 95       	ret

000003a8 <GLCD_SelectPage>:
}


void GLCD_SelectPage(GLCD_PageSelectType Page) 
{
	switch (Page) {
     3a8:	81 30       	cpi	r24, 0x01	; 1
     3aa:	89 f0       	breq	.+34     	; 0x3ce <GLCD_SelectPage+0x26>
     3ac:	28 f0       	brcs	.+10     	; 0x3b8 <GLCD_SelectPage+0x10>
     3ae:	82 30       	cpi	r24, 0x02	; 2
     3b0:	c9 f0       	breq	.+50     	; 0x3e4 <GLCD_SelectPage+0x3c>
     3b2:	83 30       	cpi	r24, 0x03	; 3
     3b4:	11 f1       	breq	.+68     	; 0x3fa <GLCD_SelectPage+0x52>
     3b6:	08 95       	ret
		case GLCD_NO_PAGES:
			DIO_setPinValue(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_PIN_LOW);
     3b8:	40 e0       	ldi	r20, 0x00	; 0
     3ba:	64 e0       	ldi	r22, 0x04	; 4
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	0e 94 22 01 	call	0x244	; 0x244 <DIO_setPinValue>
			DIO_setPinValue(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_PIN_LOW);
     3c2:	40 e0       	ldi	r20, 0x00	; 0
     3c4:	65 e0       	ldi	r22, 0x05	; 5
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	0e 94 22 01 	call	0x244	; 0x244 <DIO_setPinValue>
			break;
     3cc:	08 95       	ret
		case GLCD_PAGE_0:
			DIO_setPinValue(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_PIN_HIGH);
     3ce:	41 e0       	ldi	r20, 0x01	; 1
     3d0:	64 e0       	ldi	r22, 0x04	; 4
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	0e 94 22 01 	call	0x244	; 0x244 <DIO_setPinValue>
			DIO_setPinValue(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_PIN_LOW);
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	65 e0       	ldi	r22, 0x05	; 5
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	0e 94 22 01 	call	0x244	; 0x244 <DIO_setPinValue>
			break;
     3e2:	08 95       	ret
		case GLCD_PAGE_1:
			DIO_setPinValue(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_PIN_LOW);
     3e4:	40 e0       	ldi	r20, 0x00	; 0
     3e6:	64 e0       	ldi	r22, 0x04	; 4
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	0e 94 22 01 	call	0x244	; 0x244 <DIO_setPinValue>
			DIO_setPinValue(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_PIN_HIGH);
     3ee:	41 e0       	ldi	r20, 0x01	; 1
     3f0:	65 e0       	ldi	r22, 0x05	; 5
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	0e 94 22 01 	call	0x244	; 0x244 <DIO_setPinValue>
			break;
     3f8:	08 95       	ret
		case GLCD_BOTH_PAGES:
			DIO_setPinValue(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_PIN_HIGH);
     3fa:	41 e0       	ldi	r20, 0x01	; 1
     3fc:	64 e0       	ldi	r22, 0x04	; 4
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	0e 94 22 01 	call	0x244	; 0x244 <DIO_setPinValue>
			DIO_setPinValue(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_PIN_HIGH);
     404:	41 e0       	ldi	r20, 0x01	; 1
     406:	65 e0       	ldi	r22, 0x05	; 5
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	0e 94 22 01 	call	0x244	; 0x244 <DIO_setPinValue>
     40e:	08 95       	ret

00000410 <GLCD_SendInstruction>:
	}
}


void GLCD_SendInstruction(GLCD_CommandType Instruction) 
{
     410:	cf 93       	push	r28
     412:	c8 2f       	mov	r28, r24
	/* Select Instruction Register */
	
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_RS_PIN, GLCD_INSTRUCTION_REG);
     414:	40 e0       	ldi	r20, 0x00	; 0
     416:	62 e0       	ldi	r22, 0x02	; 2
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	0e 94 22 01 	call	0x244	; 0x244 <DIO_setPinValue>
	
	/* Select Write Operation */
	
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_RW_PIN, GLCD_WRITE_MODE);
     41e:	40 e0       	ldi	r20, 0x00	; 0
     420:	61 e0       	ldi	r22, 0x01	; 1
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	0e 94 22 01 	call	0x244	; 0x244 <DIO_setPinValue>
	
	/* Send Command on Data Pins */
	
	DIO_setPortValue(GLCD_DATA_PORT, Instruction);
     428:	6c 2f       	mov	r22, r28
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	0e 94 c2 01 	call	0x384	; 0x384 <DIO_setPortValue>
	
	/* Enable Pulse of min. width 1us */
	
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_PIN_HIGH);
     430:	41 e0       	ldi	r20, 0x01	; 1
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	0e 94 22 01 	call	0x244	; 0x244 <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     43a:	00 c0       	rjmp	.+0      	; 0x43c <GLCD_SendInstruction+0x2c>
     43c:	00 c0       	rjmp	.+0      	; 0x43e <GLCD_SendInstruction+0x2e>
     43e:	00 00       	nop
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
		
	#else
		_delay_us(5);
	#endif
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_PIN_LOW);
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	0e 94 22 01 	call	0x244	; 0x244 <DIO_setPinValue>
}
     44a:	cf 91       	pop	r28
     44c:	08 95       	ret

0000044e <GLCD_init>:
		                                     /* GPT_Init(gaStrGPT_Config); */
	#endif
	
	                                          /* Initialize Port Directions */
	
	DIO_setPinDirection(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_PIN_OUTPUT);
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinDirection>
	DIO_setPinDirection(GLCD_CTRL_PORT, GLCD_RS_PIN, DIO_PIN_OUTPUT);
     458:	41 e0       	ldi	r20, 0x01	; 1
     45a:	62 e0       	ldi	r22, 0x02	; 2
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinDirection>
	DIO_setPinDirection(GLCD_CTRL_PORT, GLCD_RW_PIN, DIO_PIN_OUTPUT);
     462:	41 e0       	ldi	r20, 0x01	; 1
     464:	61 e0       	ldi	r22, 0x01	; 1
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinDirection>
	DIO_setPinDirection(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_PIN_OUTPUT);
     46c:	41 e0       	ldi	r20, 0x01	; 1
     46e:	66 e0       	ldi	r22, 0x06	; 6
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinDirection>
	DIO_setPinDirection(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_PIN_OUTPUT);
     476:	41 e0       	ldi	r20, 0x01	; 1
     478:	64 e0       	ldi	r22, 0x04	; 4
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinDirection>
	DIO_setPinDirection(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_PIN_OUTPUT);
     480:	41 e0       	ldi	r20, 0x01	; 1
     482:	65 e0       	ldi	r22, 0x05	; 5
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinDirection>

	DIO_setPortDirection(GLCD_DATA_PORT, DIO_PIN_OUTPUT);
     48a:	61 e0       	ldi	r22, 0x01	; 1
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	0e 94 98 01 	call	0x330	; 0x330 <DIO_setPortDirection>
	
	/* Keep reset pin inactive (high) */
	
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_PIN_HIGH);
     492:	41 e0       	ldi	r20, 0x01	; 1
     494:	66 e0       	ldi	r22, 0x06	; 6
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	0e 94 22 01 	call	0x244	; 0x244 <DIO_setPinValue>
	
	/* Initialization of GLCD Sequence */
	
	GLCD_SelectPage(GLCD_BOTH_PAGES);
     49c:	83 e0       	ldi	r24, 0x03	; 3
     49e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <GLCD_SelectPage>
	GLCD_SendInstruction(GLCD_DISPLAY_OFF);
     4a2:	8e e3       	ldi	r24, 0x3E	; 62
     4a4:	0e 94 08 02 	call	0x410	; 0x410 <GLCD_SendInstruction>
	GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + 0);  /* line=0 */
     4a8:	88 eb       	ldi	r24, 0xB8	; 184
     4aa:	0e 94 08 02 	call	0x410	; 0x410 <GLCD_SendInstruction>
	
	Current_X_Address = 0;
     4ae:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <Current_X_Address>
	
	GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + 0);  /* column=0 */
     4b2:	80 e4       	ldi	r24, 0x40	; 64
     4b4:	0e 94 08 02 	call	0x410	; 0x410 <GLCD_SendInstruction>
	
	Current_Y_Address = 0;
     4b8:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <Current_Y_Address>
	
	GLCD_SendInstruction(GLCD_SET_Z_ADDRESS_PREFIX + 0);  /* start_line=0 */
     4bc:	80 ec       	ldi	r24, 0xC0	; 192
     4be:	0e 94 08 02 	call	0x410	; 0x410 <GLCD_SendInstruction>
	GLCD_SendInstruction(GLCD_DISPLAY_ON);
     4c2:	8f e3       	ldi	r24, 0x3F	; 63
     4c4:	0e 94 08 02 	call	0x410	; 0x410 <GLCD_SendInstruction>
	GLCD_SelectPage(GLCD_PAGE_0);
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <GLCD_SelectPage>
	
	Current_Page = 0;
     4ce:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__data_end>
     4d2:	08 95       	ret

000004d4 <GLCD_SendData>:
		_delay_us(5);
	#endif
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_PIN_LOW);
}

void GLCD_SendData(u8 Data) {
     4d4:	cf 93       	push	r28
     4d6:	c8 2f       	mov	r28, r24
	
	
	/* Select Data Register */
	
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_RS_PIN, GLCD_DATA_REG);
     4d8:	41 e0       	ldi	r20, 0x01	; 1
     4da:	62 e0       	ldi	r22, 0x02	; 2
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	0e 94 22 01 	call	0x244	; 0x244 <DIO_setPinValue>
	
	/* Select Write Operation */
	
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_RW_PIN, GLCD_WRITE_MODE);
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	61 e0       	ldi	r22, 0x01	; 1
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	0e 94 22 01 	call	0x244	; 0x244 <DIO_setPinValue>
	
	/* Send Command on Data Pins */
	
	DIO_setPortValue(GLCD_DATA_PORT, Data);
     4ec:	6c 2f       	mov	r22, r28
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	0e 94 c2 01 	call	0x384	; 0x384 <DIO_setPortValue>
	
	/* Enable Pulse of min. width 1us */
	
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_PIN_HIGH);
     4f4:	41 e0       	ldi	r20, 0x01	; 1
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	0e 94 22 01 	call	0x244	; 0x244 <DIO_setPinValue>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <GLCD_SendData+0x2c>
     500:	00 c0       	rjmp	.+0      	; 0x502 <GLCD_SendData+0x2e>
     502:	00 00       	nop
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
	 
	#else
		_delay_us(5);
	#endif
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_PIN_LOW);
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	0e 94 22 01 	call	0x244	; 0x244 <DIO_setPinValue>
}
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <GLCD_Reset>:

void GLCD_Reset(void) 
{
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_PIN_LOW);
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	66 e0       	ldi	r22, 0x06	; 6
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	0e 94 22 01 	call	0x244	; 0x244 <DIO_setPinValue>
     51c:	83 e0       	ldi	r24, 0x03	; 3
     51e:	8a 95       	dec	r24
     520:	f1 f7       	brne	.-4      	; 0x51e <GLCD_Reset+0xc>
     522:	00 00       	nop
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
	                                             	//GPT_Delay_us(&gaStrGPT_Config[0], 10);
	#else
	_delay_us(10);
	#endif
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_PIN_HIGH);
     524:	41 e0       	ldi	r20, 0x01	; 1
     526:	66 e0       	ldi	r22, 0x06	; 6
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	0e 94 22 01 	call	0x244	; 0x244 <DIO_setPinValue>
     52e:	08 95       	ret

00000530 <GLCD_DisplaySpecialPattern>:
}

void GLCD_DisplaySpecialPattern(u64 Pattern) {
     530:	9f 92       	push	r9
     532:	af 92       	push	r10
     534:	bf 92       	push	r11
     536:	cf 92       	push	r12
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	92 2e       	mov	r9, r18
     548:	a3 2e       	mov	r10, r19
     54a:	b4 2e       	mov	r11, r20
     54c:	c5 2e       	mov	r12, r21
     54e:	d6 2e       	mov	r13, r22
     550:	e7 2e       	mov	r14, r23
     552:	f8 2e       	mov	r15, r24
     554:	d9 2f       	mov	r29, r25
	for(u8 i = 0; i < 5; i++) 
     556:	c0 e0       	ldi	r28, 0x00	; 0
     558:	30 c0       	rjmp	.+96     	; 0x5ba <GLCD_DisplaySpecialPattern+0x8a>
	{
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + Current_X_Address);
     55a:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <Current_X_Address>
     55e:	88 54       	subi	r24, 0x48	; 72
     560:	0e 94 08 02 	call	0x410	; 0x410 <GLCD_SendInstruction>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + Current_Y_Address);
     564:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <Current_Y_Address>
     568:	80 5c       	subi	r24, 0xC0	; 192
     56a:	0e 94 08 02 	call	0x410	; 0x410 <GLCD_SendInstruction>
		GLCD_SendData((Pattern>>(i*8U)) & 0x00000000FFUL);
     56e:	0c 2f       	mov	r16, r28
     570:	10 e0       	ldi	r17, 0x00	; 0
     572:	00 0f       	add	r16, r16
     574:	11 1f       	adc	r17, r17
     576:	00 0f       	add	r16, r16
     578:	11 1f       	adc	r17, r17
     57a:	00 0f       	add	r16, r16
     57c:	11 1f       	adc	r17, r17
     57e:	29 2d       	mov	r18, r9
     580:	3a 2d       	mov	r19, r10
     582:	4b 2d       	mov	r20, r11
     584:	5c 2d       	mov	r21, r12
     586:	6d 2d       	mov	r22, r13
     588:	7e 2d       	mov	r23, r14
     58a:	8f 2d       	mov	r24, r15
     58c:	9d 2f       	mov	r25, r29
     58e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__lshrdi3>
     592:	82 2f       	mov	r24, r18
     594:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <GLCD_SendData>
		Current_Y_Address++;
     598:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <Current_Y_Address>
     59c:	8f 5f       	subi	r24, 0xFF	; 255
     59e:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <Current_Y_Address>
		
		if (Current_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && Current_Page == 0) 
     5a2:	80 34       	cpi	r24, 0x40	; 64
     5a4:	48 f0       	brcs	.+18     	; 0x5b8 <GLCD_DisplaySpecialPattern+0x88>
     5a6:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end>
     5aa:	81 11       	cpse	r24, r1
     5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <GLCD_DisplaySpecialPattern+0x88>
		{
			GLCD_SelectPage(GLCD_PAGE_1);
     5ae:	82 e0       	ldi	r24, 0x02	; 2
     5b0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <GLCD_SelectPage>
			Current_Y_Address = 0;
     5b4:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <Current_Y_Address>
	#endif
	DIO_setPinValue(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_PIN_HIGH);
}

void GLCD_DisplaySpecialPattern(u64 Pattern) {
	for(u8 i = 0; i < 5; i++) 
     5b8:	cf 5f       	subi	r28, 0xFF	; 255
     5ba:	c5 30       	cpi	r28, 0x05	; 5
     5bc:	70 f2       	brcs	.-100    	; 0x55a <GLCD_DisplaySpecialPattern+0x2a>
		{
			GLCD_SelectPage(GLCD_PAGE_1);
			Current_Y_Address = 0;
		}
	}
}
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	ff 90       	pop	r15
     5c8:	ef 90       	pop	r14
     5ca:	df 90       	pop	r13
     5cc:	cf 90       	pop	r12
     5ce:	bf 90       	pop	r11
     5d0:	af 90       	pop	r10
     5d2:	9f 90       	pop	r9
     5d4:	08 95       	ret

000005d6 <GLCD_DisplayCharacter>:

void GLCD_DisplayCharacter(u8 Data) 
{
     5d6:	e8 2f       	mov	r30, r24
	if ((Current_Page == 0) | (Current_Y_Address < GLCD_MAX_PAGE_PIXEL_WIDTH - 7U)) {
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end>
     5de:	81 11       	cpse	r24, r1
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	20 91 b5 00 	lds	r18, 0x00B5	; 0x8000b5 <Current_Y_Address>
     5e8:	29 33       	cpi	r18, 0x39	; 57
     5ea:	08 f0       	brcs	.+2      	; 0x5ee <GLCD_DisplayCharacter+0x18>
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <GLCD_DisplayCharacter+0x1e>
     5f2:	eb c1       	rjmp	.+982    	; 0x9ca <__stack+0x16b>
		
		switch (Data) {
     5f4:	8e 2f       	mov	r24, r30
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	fc 01       	movw	r30, r24
     5fa:	b0 97       	sbiw	r30, 0x20	; 32
     5fc:	eb 35       	cpi	r30, 0x5B	; 91
     5fe:	f1 05       	cpc	r31, r1
     600:	08 f0       	brcs	.+2      	; 0x604 <GLCD_DisplayCharacter+0x2e>
     602:	c6 c1       	rjmp	.+908    	; 0x990 <__stack+0x131>
     604:	e6 5d       	subi	r30, 0xD6	; 214
     606:	ff 4f       	sbci	r31, 0xFF	; 255
     608:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__tablejump2__>
			case 'A': case 'a': GLCD_DisplaySpecialPattern(GLCD_CHAR_A); break;
     60c:	2c e7       	ldi	r18, 0x7C	; 124
     60e:	32 e1       	ldi	r19, 0x12	; 18
     610:	41 e1       	ldi	r20, 0x11	; 17
     612:	52 e1       	ldi	r21, 0x12	; 18
     614:	6c e7       	ldi	r22, 0x7C	; 124
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     620:	b7 c1       	rjmp	.+878    	; 0x990 <__stack+0x131>
			case 'B': case 'b': GLCD_DisplaySpecialPattern(GLCD_CHAR_B); break;
     622:	2f e7       	ldi	r18, 0x7F	; 127
     624:	39 e4       	ldi	r19, 0x49	; 73
     626:	49 e4       	ldi	r20, 0x49	; 73
     628:	59 e4       	ldi	r21, 0x49	; 73
     62a:	66 e3       	ldi	r22, 0x36	; 54
     62c:	70 e0       	ldi	r23, 0x00	; 0
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     636:	ac c1       	rjmp	.+856    	; 0x990 <__stack+0x131>
			case 'C': case 'c': GLCD_DisplaySpecialPattern(GLCD_CHAR_C); break;
     638:	2e e3       	ldi	r18, 0x3E	; 62
     63a:	31 e4       	ldi	r19, 0x41	; 65
     63c:	41 e4       	ldi	r20, 0x41	; 65
     63e:	51 e4       	ldi	r21, 0x41	; 65
     640:	61 e4       	ldi	r22, 0x41	; 65
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     64c:	a1 c1       	rjmp	.+834    	; 0x990 <__stack+0x131>
			case 'D': case 'd': GLCD_DisplaySpecialPattern(GLCD_CHAR_D); break;
     64e:	2f e7       	ldi	r18, 0x7F	; 127
     650:	31 e4       	ldi	r19, 0x41	; 65
     652:	41 e4       	ldi	r20, 0x41	; 65
     654:	5e e3       	ldi	r21, 0x3E	; 62
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     662:	96 c1       	rjmp	.+812    	; 0x990 <__stack+0x131>
			case 'E': case 'e': GLCD_DisplaySpecialPattern(GLCD_CHAR_E); break;
     664:	2f e7       	ldi	r18, 0x7F	; 127
     666:	39 e4       	ldi	r19, 0x49	; 73
     668:	49 e4       	ldi	r20, 0x49	; 73
     66a:	59 e4       	ldi	r21, 0x49	; 73
     66c:	61 e4       	ldi	r22, 0x41	; 65
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     678:	8b c1       	rjmp	.+790    	; 0x990 <__stack+0x131>
			case 'F': case 'f': GLCD_DisplaySpecialPattern(GLCD_CHAR_F); break;
     67a:	2f e7       	ldi	r18, 0x7F	; 127
     67c:	39 e0       	ldi	r19, 0x09	; 9
     67e:	49 e0       	ldi	r20, 0x09	; 9
     680:	59 e0       	ldi	r21, 0x09	; 9
     682:	61 e0       	ldi	r22, 0x01	; 1
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     68e:	80 c1       	rjmp	.+768    	; 0x990 <__stack+0x131>
			case 'G': case 'g': GLCD_DisplaySpecialPattern(GLCD_CHAR_G); break;
     690:	2e e3       	ldi	r18, 0x3E	; 62
     692:	31 e4       	ldi	r19, 0x41	; 65
     694:	41 e4       	ldi	r20, 0x41	; 65
     696:	59 e2       	ldi	r21, 0x29	; 41
     698:	6a e7       	ldi	r22, 0x7A	; 122
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     6a4:	75 c1       	rjmp	.+746    	; 0x990 <__stack+0x131>
			case 'H': case 'h': GLCD_DisplaySpecialPattern(GLCD_CHAR_H); break;
     6a6:	2f e7       	ldi	r18, 0x7F	; 127
     6a8:	38 e0       	ldi	r19, 0x08	; 8
     6aa:	48 e0       	ldi	r20, 0x08	; 8
     6ac:	58 e0       	ldi	r21, 0x08	; 8
     6ae:	6f e7       	ldi	r22, 0x7F	; 127
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     6ba:	6a c1       	rjmp	.+724    	; 0x990 <__stack+0x131>
			case 'I': case 'i': GLCD_DisplaySpecialPattern(GLCD_CHAR_I); break;
     6bc:	21 e4       	ldi	r18, 0x41	; 65
     6be:	31 e4       	ldi	r19, 0x41	; 65
     6c0:	4f e7       	ldi	r20, 0x7F	; 127
     6c2:	51 e4       	ldi	r21, 0x41	; 65
     6c4:	61 e4       	ldi	r22, 0x41	; 65
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     6d0:	5f c1       	rjmp	.+702    	; 0x990 <__stack+0x131>
			case 'J': case 'j': GLCD_DisplaySpecialPattern(GLCD_CHAR_J); break;
     6d2:	20 e2       	ldi	r18, 0x20	; 32
     6d4:	30 e4       	ldi	r19, 0x40	; 64
     6d6:	41 e4       	ldi	r20, 0x41	; 65
     6d8:	5f e3       	ldi	r21, 0x3F	; 63
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     6e6:	54 c1       	rjmp	.+680    	; 0x990 <__stack+0x131>
			case 'K': case 'k': GLCD_DisplaySpecialPattern(GLCD_CHAR_K); break;
     6e8:	2f e7       	ldi	r18, 0x7F	; 127
     6ea:	38 e0       	ldi	r19, 0x08	; 8
     6ec:	44 e1       	ldi	r20, 0x14	; 20
     6ee:	52 e2       	ldi	r21, 0x22	; 34
     6f0:	61 e4       	ldi	r22, 0x41	; 65
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     6fc:	49 c1       	rjmp	.+658    	; 0x990 <__stack+0x131>
			case 'L': case 'l': GLCD_DisplaySpecialPattern(GLCD_CHAR_L); break;
     6fe:	2f e7       	ldi	r18, 0x7F	; 127
     700:	30 e4       	ldi	r19, 0x40	; 64
     702:	40 e4       	ldi	r20, 0x40	; 64
     704:	50 e4       	ldi	r21, 0x40	; 64
     706:	60 e4       	ldi	r22, 0x40	; 64
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     712:	3e c1       	rjmp	.+636    	; 0x990 <__stack+0x131>
			case 'M': case 'm': GLCD_DisplaySpecialPattern(GLCD_CHAR_M); break;
     714:	2f e7       	ldi	r18, 0x7F	; 127
     716:	32 e0       	ldi	r19, 0x02	; 2
     718:	4c e0       	ldi	r20, 0x0C	; 12
     71a:	52 e0       	ldi	r21, 0x02	; 2
     71c:	6f e7       	ldi	r22, 0x7F	; 127
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     728:	33 c1       	rjmp	.+614    	; 0x990 <__stack+0x131>
			case 'N': case 'n': GLCD_DisplaySpecialPattern(GLCD_CHAR_N); break;
     72a:	2f e7       	ldi	r18, 0x7F	; 127
     72c:	32 e0       	ldi	r19, 0x02	; 2
     72e:	4c e1       	ldi	r20, 0x1C	; 28
     730:	50 e2       	ldi	r21, 0x20	; 32
     732:	6f e7       	ldi	r22, 0x7F	; 127
     734:	70 e0       	ldi	r23, 0x00	; 0
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     73e:	28 c1       	rjmp	.+592    	; 0x990 <__stack+0x131>
			case 'O': case 'o': GLCD_DisplaySpecialPattern(GLCD_CHAR_O); break;
     740:	2e e3       	ldi	r18, 0x3E	; 62
     742:	31 e4       	ldi	r19, 0x41	; 65
     744:	41 e4       	ldi	r20, 0x41	; 65
     746:	51 e4       	ldi	r21, 0x41	; 65
     748:	6e e3       	ldi	r22, 0x3E	; 62
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     754:	1d c1       	rjmp	.+570    	; 0x990 <__stack+0x131>
			case 'P': case 'p': GLCD_DisplaySpecialPattern(GLCD_CHAR_P); break;
     756:	2f e7       	ldi	r18, 0x7F	; 127
     758:	39 e0       	ldi	r19, 0x09	; 9
     75a:	49 e0       	ldi	r20, 0x09	; 9
     75c:	59 e0       	ldi	r21, 0x09	; 9
     75e:	66 e0       	ldi	r22, 0x06	; 6
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     76a:	12 c1       	rjmp	.+548    	; 0x990 <__stack+0x131>
			case 'Q': case 'q': GLCD_DisplaySpecialPattern(GLCD_CHAR_Q); break;
     76c:	2e e3       	ldi	r18, 0x3E	; 62
     76e:	31 e4       	ldi	r19, 0x41	; 65
     770:	41 e5       	ldi	r20, 0x51	; 81
     772:	51 e2       	ldi	r21, 0x21	; 33
     774:	6e e5       	ldi	r22, 0x5E	; 94
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     780:	07 c1       	rjmp	.+526    	; 0x990 <__stack+0x131>
			case 'R': case 'r': GLCD_DisplaySpecialPattern(GLCD_CHAR_R); break;
     782:	2f e7       	ldi	r18, 0x7F	; 127
     784:	39 e0       	ldi	r19, 0x09	; 9
     786:	49 e1       	ldi	r20, 0x19	; 25
     788:	59 e2       	ldi	r21, 0x29	; 41
     78a:	66 e4       	ldi	r22, 0x46	; 70
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     796:	fc c0       	rjmp	.+504    	; 0x990 <__stack+0x131>
			case 'S': case 's': GLCD_DisplaySpecialPattern(GLCD_CHAR_S); break;
     798:	26 e2       	ldi	r18, 0x26	; 38
     79a:	39 e4       	ldi	r19, 0x49	; 73
     79c:	49 e4       	ldi	r20, 0x49	; 73
     79e:	59 e4       	ldi	r21, 0x49	; 73
     7a0:	62 e3       	ldi	r22, 0x32	; 50
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     7ac:	f1 c0       	rjmp	.+482    	; 0x990 <__stack+0x131>
			case 'T': case 't': GLCD_DisplaySpecialPattern(GLCD_CHAR_T); break;
     7ae:	21 e0       	ldi	r18, 0x01	; 1
     7b0:	31 e0       	ldi	r19, 0x01	; 1
     7b2:	4f e7       	ldi	r20, 0x7F	; 127
     7b4:	51 e0       	ldi	r21, 0x01	; 1
     7b6:	61 e0       	ldi	r22, 0x01	; 1
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     7c2:	e6 c0       	rjmp	.+460    	; 0x990 <__stack+0x131>
			case 'U': case 'u': GLCD_DisplaySpecialPattern(GLCD_CHAR_U); break;
     7c4:	2f e3       	ldi	r18, 0x3F	; 63
     7c6:	30 e4       	ldi	r19, 0x40	; 64
     7c8:	40 e4       	ldi	r20, 0x40	; 64
     7ca:	50 e4       	ldi	r21, 0x40	; 64
     7cc:	6f e3       	ldi	r22, 0x3F	; 63
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     7d8:	db c0       	rjmp	.+438    	; 0x990 <__stack+0x131>
			case 'V': case 'v': GLCD_DisplaySpecialPattern(GLCD_CHAR_V); break;
     7da:	2f e1       	ldi	r18, 0x1F	; 31
     7dc:	30 e2       	ldi	r19, 0x20	; 32
     7de:	40 e4       	ldi	r20, 0x40	; 64
     7e0:	50 e2       	ldi	r21, 0x20	; 32
     7e2:	6f e1       	ldi	r22, 0x1F	; 31
     7e4:	70 e0       	ldi	r23, 0x00	; 0
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     7ee:	d0 c0       	rjmp	.+416    	; 0x990 <__stack+0x131>
			case 'W': case 'w': GLCD_DisplaySpecialPattern(GLCD_CHAR_W); break;
     7f0:	2f e3       	ldi	r18, 0x3F	; 63
     7f2:	30 e4       	ldi	r19, 0x40	; 64
     7f4:	40 e2       	ldi	r20, 0x20	; 32
     7f6:	50 e4       	ldi	r21, 0x40	; 64
     7f8:	6f e3       	ldi	r22, 0x3F	; 63
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     804:	c5 c0       	rjmp	.+394    	; 0x990 <__stack+0x131>
			case 'X': case 'x': GLCD_DisplaySpecialPattern(GLCD_CHAR_X); break;
     806:	23 e6       	ldi	r18, 0x63	; 99
     808:	34 e1       	ldi	r19, 0x14	; 20
     80a:	48 e0       	ldi	r20, 0x08	; 8
     80c:	54 e1       	ldi	r21, 0x14	; 20
     80e:	63 e6       	ldi	r22, 0x63	; 99
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     81a:	ba c0       	rjmp	.+372    	; 0x990 <__stack+0x131>
			case 'Y': case 'y': GLCD_DisplaySpecialPattern(GLCD_CHAR_Y); break;
     81c:	23 e0       	ldi	r18, 0x03	; 3
     81e:	3c e0       	ldi	r19, 0x0C	; 12
     820:	40 e7       	ldi	r20, 0x70	; 112
     822:	5c e0       	ldi	r21, 0x0C	; 12
     824:	63 e0       	ldi	r22, 0x03	; 3
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     830:	af c0       	rjmp	.+350    	; 0x990 <__stack+0x131>
			case 'Z': case 'z': GLCD_DisplaySpecialPattern(GLCD_CHAR_Z); break;
     832:	21 e6       	ldi	r18, 0x61	; 97
     834:	31 e5       	ldi	r19, 0x51	; 81
     836:	49 e4       	ldi	r20, 0x49	; 73
     838:	55 e4       	ldi	r21, 0x45	; 69
     83a:	63 e4       	ldi	r22, 0x43	; 67
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     846:	a4 c0       	rjmp	.+328    	; 0x990 <__stack+0x131>
			
			case '%': GLCD_DisplaySpecialPattern(GLCD_CHAR_PERCENT); break;
     848:	23 ec       	ldi	r18, 0xC3	; 195
     84a:	33 e7       	ldi	r19, 0x73	; 115
     84c:	48 e1       	ldi	r20, 0x18	; 24
     84e:	5e ec       	ldi	r21, 0xCE	; 206
     850:	63 ec       	ldi	r22, 0xC3	; 195
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     85c:	99 c0       	rjmp	.+306    	; 0x990 <__stack+0x131>
			case '=': GLCD_DisplaySpecialPattern(GLCD_CHAR_EQUAL); break;
     85e:	24 e2       	ldi	r18, 0x24	; 36
     860:	34 e2       	ldi	r19, 0x24	; 36
     862:	44 e2       	ldi	r20, 0x24	; 36
     864:	54 e2       	ldi	r21, 0x24	; 36
     866:	64 e2       	ldi	r22, 0x24	; 36
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     872:	8e c0       	rjmp	.+284    	; 0x990 <__stack+0x131>
			case '.': GLCD_DisplaySpecialPattern(GLCD_CHAR_POINT); break;
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	30 e7       	ldi	r19, 0x70	; 112
     878:	40 e7       	ldi	r20, 0x70	; 112
     87a:	50 e7       	ldi	r21, 0x70	; 112
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     888:	83 c0       	rjmp	.+262    	; 0x990 <__stack+0x131>
			case ' ': GLCD_DisplaySpecialPattern(GLCD_CHAR_SPACE); break;
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	40 e0       	ldi	r20, 0x00	; 0
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     89e:	78 c0       	rjmp	.+240    	; 0x990 <__stack+0x131>
			case '-': GLCD_DisplaySpecialPattern(GLCD_CHAR_NEGATIVE); break;
     8a0:	28 e1       	ldi	r18, 0x18	; 24
     8a2:	38 e1       	ldi	r19, 0x18	; 24
     8a4:	48 e1       	ldi	r20, 0x18	; 24
     8a6:	58 e1       	ldi	r21, 0x18	; 24
     8a8:	68 e1       	ldi	r22, 0x18	; 24
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     8b4:	6d c0       	rjmp	.+218    	; 0x990 <__stack+0x131>
			
			case '0': GLCD_DisplaySpecialPattern(GLCD_CHAR_0); break;
     8b6:	2e e3       	ldi	r18, 0x3E	; 62
     8b8:	31 e5       	ldi	r19, 0x51	; 81
     8ba:	49 e4       	ldi	r20, 0x49	; 73
     8bc:	55 e4       	ldi	r21, 0x45	; 69
     8be:	6e e3       	ldi	r22, 0x3E	; 62
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     8ca:	62 c0       	rjmp	.+196    	; 0x990 <__stack+0x131>
			case '1': GLCD_DisplaySpecialPattern(GLCD_CHAR_1); break;
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	32 e4       	ldi	r19, 0x42	; 66
     8d0:	4f e7       	ldi	r20, 0x7F	; 127
     8d2:	50 e4       	ldi	r21, 0x40	; 64
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     8e0:	57 c0       	rjmp	.+174    	; 0x990 <__stack+0x131>
			case '2': GLCD_DisplaySpecialPattern(GLCD_CHAR_2); break;
     8e2:	22 e4       	ldi	r18, 0x42	; 66
     8e4:	31 e6       	ldi	r19, 0x61	; 97
     8e6:	41 e5       	ldi	r20, 0x51	; 81
     8e8:	59 e4       	ldi	r21, 0x49	; 73
     8ea:	66 e4       	ldi	r22, 0x46	; 70
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     8f6:	4c c0       	rjmp	.+152    	; 0x990 <__stack+0x131>
			case '3': GLCD_DisplaySpecialPattern(GLCD_CHAR_3); break;
     8f8:	21 e4       	ldi	r18, 0x41	; 65
     8fa:	39 e4       	ldi	r19, 0x49	; 73
     8fc:	49 e4       	ldi	r20, 0x49	; 73
     8fe:	59 e4       	ldi	r21, 0x49	; 73
     900:	66 e3       	ldi	r22, 0x36	; 54
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     90c:	41 c0       	rjmp	.+130    	; 0x990 <__stack+0x131>
			case '4': GLCD_DisplaySpecialPattern(GLCD_CHAR_4); break;
     90e:	28 e1       	ldi	r18, 0x18	; 24
     910:	34 e1       	ldi	r19, 0x14	; 20
     912:	42 e1       	ldi	r20, 0x12	; 18
     914:	5f e7       	ldi	r21, 0x7F	; 127
     916:	60 e1       	ldi	r22, 0x10	; 16
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     922:	36 c0       	rjmp	.+108    	; 0x990 <__stack+0x131>
			case '5': GLCD_DisplaySpecialPattern(GLCD_CHAR_5); break;
     924:	2f e4       	ldi	r18, 0x4F	; 79
     926:	39 e4       	ldi	r19, 0x49	; 73
     928:	49 e4       	ldi	r20, 0x49	; 73
     92a:	59 e4       	ldi	r21, 0x49	; 73
     92c:	61 e3       	ldi	r22, 0x31	; 49
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     938:	2b c0       	rjmp	.+86     	; 0x990 <__stack+0x131>
			case '6': GLCD_DisplaySpecialPattern(GLCD_CHAR_6); break;
     93a:	2c e7       	ldi	r18, 0x7C	; 124
     93c:	3a e4       	ldi	r19, 0x4A	; 74
     93e:	49 e4       	ldi	r20, 0x49	; 73
     940:	59 e4       	ldi	r21, 0x49	; 73
     942:	61 e3       	ldi	r22, 0x31	; 49
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     94e:	20 c0       	rjmp	.+64     	; 0x990 <__stack+0x131>
			case '7': GLCD_DisplaySpecialPattern(GLCD_CHAR_7); break;
     950:	23 e0       	ldi	r18, 0x03	; 3
     952:	31 e0       	ldi	r19, 0x01	; 1
     954:	41 e7       	ldi	r20, 0x71	; 113
     956:	59 e0       	ldi	r21, 0x09	; 9
     958:	67 e0       	ldi	r22, 0x07	; 7
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     964:	15 c0       	rjmp	.+42     	; 0x990 <__stack+0x131>
			case '8': GLCD_DisplaySpecialPattern(GLCD_CHAR_8); break;
     966:	26 e3       	ldi	r18, 0x36	; 54
     968:	39 e4       	ldi	r19, 0x49	; 73
     96a:	49 e4       	ldi	r20, 0x49	; 73
     96c:	59 e4       	ldi	r21, 0x49	; 73
     96e:	66 e3       	ldi	r22, 0x36	; 54
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
     97a:	0a c0       	rjmp	.+20     	; 0x990 <__stack+0x131>
			case '9': GLCD_DisplaySpecialPattern(GLCD_CHAR_9); break;
     97c:	26 e0       	ldi	r18, 0x06	; 6
     97e:	39 e4       	ldi	r19, 0x49	; 73
     980:	49 e4       	ldi	r20, 0x49	; 73
     982:	59 e2       	ldi	r21, 0x29	; 41
     984:	6e e1       	ldi	r22, 0x1E	; 30
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
			default: break;
		}
		
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + Current_X_Address);
     990:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <Current_X_Address>
     994:	88 54       	subi	r24, 0x48	; 72
     996:	0e 94 08 02 	call	0x410	; 0x410 <GLCD_SendInstruction>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + Current_Y_Address);
     99a:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <Current_Y_Address>
     99e:	80 5c       	subi	r24, 0xC0	; 192
     9a0:	0e 94 08 02 	call	0x410	; 0x410 <GLCD_SendInstruction>
		GLCD_SendData(0);
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <GLCD_SendData>
		Current_Y_Address++;
     9aa:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <Current_Y_Address>
     9ae:	8f 5f       	subi	r24, 0xFF	; 255
     9b0:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <Current_Y_Address>
		
		if (Current_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && Current_Page == 0) {
     9b4:	80 34       	cpi	r24, 0x40	; 64
     9b6:	48 f0       	brcs	.+18     	; 0x9ca <__stack+0x16b>
     9b8:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end>
     9bc:	81 11       	cpse	r24, r1
     9be:	05 c0       	rjmp	.+10     	; 0x9ca <__stack+0x16b>
			GLCD_SelectPage(GLCD_PAGE_1);
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <GLCD_SelectPage>
			Current_Y_Address = 0;
     9c6:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <Current_Y_Address>
     9ca:	08 95       	ret

000009cc <GLCD_DisplayString>:
		}
	}
}

void GLCD_DisplayString(u8* Data_Ptr) 
{
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	ec 01       	movw	r28, r24
	while (*Data_Ptr != '\0') {
     9d2:	03 c0       	rjmp	.+6      	; 0x9da <GLCD_DisplayString+0xe>
		GLCD_DisplayCharacter(*Data_Ptr);
     9d4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <GLCD_DisplayCharacter>
		Data_Ptr++;
     9d8:	21 96       	adiw	r28, 0x01	; 1
	}
}

void GLCD_DisplayString(u8* Data_Ptr) 
{
	while (*Data_Ptr != '\0') {
     9da:	88 81       	ld	r24, Y
     9dc:	81 11       	cpse	r24, r1
     9de:	fa cf       	rjmp	.-12     	; 0x9d4 <GLCD_DisplayString+0x8>
		GLCD_DisplayCharacter(*Data_Ptr);
		Data_Ptr++;
	}
}
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	08 95       	ret

000009e6 <GLCD_DisplayInteger>:

void GLCD_DisplayInteger(s32 Data)
{
     9e6:	cf 92       	push	r12
     9e8:	df 92       	push	r13
     9ea:	ef 92       	push	r14
     9ec:	ff 92       	push	r15
     9ee:	0f 93       	push	r16
     9f0:	1f 93       	push	r17
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	00 d0       	rcall	.+0      	; 0x9f8 <GLCD_DisplayInteger+0x12>
     9f8:	00 d0       	rcall	.+0      	; 0x9fa <GLCD_DisplayInteger+0x14>
     9fa:	1f 92       	push	r1
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
     a00:	6b 01       	movw	r12, r22
     a02:	7c 01       	movw	r14, r24
	if (Data < 0) {
     a04:	99 23       	and	r25, r25
     a06:	5c f4       	brge	.+22     	; 0xa1e <GLCD_DisplayInteger+0x38>
		GLCD_DisplayCharacter('-');
     a08:	8d e2       	ldi	r24, 0x2D	; 45
     a0a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <GLCD_DisplayCharacter>
		Data = -1 * Data;
     a0e:	f0 94       	com	r15
     a10:	e0 94       	com	r14
     a12:	d0 94       	com	r13
     a14:	c0 94       	com	r12
     a16:	c1 1c       	adc	r12, r1
     a18:	d1 1c       	adc	r13, r1
     a1a:	e1 1c       	adc	r14, r1
     a1c:	f1 1c       	adc	r15, r1
	}
	u8 u8Local_Digit = 0U;
	char str_reversed[5] = "";
     a1e:	1a 82       	std	Y+2, r1	; 0x02
     a20:	19 82       	std	Y+1, r1	; 0x01
     a22:	fe 01       	movw	r30, r28
     a24:	33 96       	adiw	r30, 0x03	; 3
     a26:	83 e0       	ldi	r24, 0x03	; 3
     a28:	df 01       	movw	r26, r30
     a2a:	1d 92       	st	X+, r1
     a2c:	8a 95       	dec	r24
     a2e:	e9 f7       	brne	.-6      	; 0xa2a <GLCD_DisplayInteger+0x44>
	char* str_ptr = str_reversed;
     a30:	8e 01       	movw	r16, r28
     a32:	0f 5f       	subi	r16, 0xFF	; 255
     a34:	1f 4f       	sbci	r17, 0xFF	; 255
	do {
		u8Local_Digit = Data%10;
     a36:	c7 01       	movw	r24, r14
     a38:	b6 01       	movw	r22, r12
     a3a:	2a e0       	ldi	r18, 0x0A	; 10
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	40 e0       	ldi	r20, 0x00	; 0
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__divmodsi4>
		*str_ptr = (char)(48 + u8Local_Digit); /* 48 is the ASCII code of '0' */
     a46:	60 5d       	subi	r22, 0xD0	; 208
     a48:	f8 01       	movw	r30, r16
     a4a:	61 93       	st	Z+, r22
     a4c:	8f 01       	movw	r16, r30
		Data = Data/10;
     a4e:	c2 2e       	mov	r12, r18
     a50:	d3 2e       	mov	r13, r19
     a52:	e4 2e       	mov	r14, r20
     a54:	f5 2e       	mov	r15, r21
		str_ptr++;
	} while (Data > 0);
     a56:	1c 14       	cp	r1, r12
     a58:	1d 04       	cpc	r1, r13
     a5a:	1e 04       	cpc	r1, r14
     a5c:	1f 04       	cpc	r1, r15
     a5e:	5c f3       	brlt	.-42     	; 0xa36 <GLCD_DisplayInteger+0x50>
	do {
		str_ptr--;
		GLCD_DisplayCharacter(*str_ptr);
     a60:	d8 01       	movw	r26, r16
     a62:	8e 91       	ld	r24, -X
     a64:	8d 01       	movw	r16, r26
     a66:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <GLCD_DisplayCharacter>
	} while (str_ptr != str_reversed);
     a6a:	ce 01       	movw	r24, r28
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	80 17       	cp	r24, r16
     a70:	91 07       	cpc	r25, r17
     a72:	b1 f7       	brne	.-20     	; 0xa60 <GLCD_DisplayInteger+0x7a>
}
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	ff 90       	pop	r15
     a88:	ef 90       	pop	r14
     a8a:	df 90       	pop	r13
     a8c:	cf 90       	pop	r12
     a8e:	08 95       	ret

00000a90 <GLCD_DisplayFloatingPoint>:

void GLCD_DisplayFloatingPoint(f32 Data)
{
     a90:	8f 92       	push	r8
     a92:	9f 92       	push	r9
     a94:	af 92       	push	r10
     a96:	bf 92       	push	r11
     a98:	cf 92       	push	r12
     a9a:	df 92       	push	r13
     a9c:	ef 92       	push	r14
     a9e:	ff 92       	push	r15
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	4b 01       	movw	r8, r22
     aa6:	5c 01       	movw	r10, r24
	                                                        /* 3 Decimal Places */
	
	u16 IntegerPart = (u16)Data;
     aa8:	0e 94 38 0a 	call	0x1470	; 0x1470 <__fixunssfsi>
	GLCD_DisplayInteger(IntegerPart);
     aac:	6b 01       	movw	r12, r22
     aae:	e1 2c       	mov	r14, r1
     ab0:	f1 2c       	mov	r15, r1
     ab2:	c7 01       	movw	r24, r14
     ab4:	b6 01       	movw	r22, r12
     ab6:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <GLCD_DisplayInteger>
	GLCD_DisplayCharacter('.');
     aba:	8e e2       	ldi	r24, 0x2E	; 46
     abc:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <GLCD_DisplayCharacter>
	f32 DecimalPart = (Data - IntegerPart);
     ac0:	c7 01       	movw	r24, r14
     ac2:	b6 01       	movw	r22, r12
     ac4:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__floatunsisf>
     ac8:	9b 01       	movw	r18, r22
     aca:	ac 01       	movw	r20, r24
     acc:	c5 01       	movw	r24, r10
     ace:	b4 01       	movw	r22, r8
     ad0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__subsf3>
	u8 Digit = 0;
	for (u8 i = 0; i < 3; i++) {
     ad4:	d0 e0       	ldi	r29, 0x00	; 0
     ad6:	1c c0       	rjmp	.+56     	; 0xb10 <GLCD_DisplayFloatingPoint+0x80>
		Digit = (u8)(DecimalPart * 10.0);
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	40 e2       	ldi	r20, 0x20	; 32
     ade:	51 e4       	ldi	r21, 0x41	; 65
     ae0:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__mulsf3>
     ae4:	6b 01       	movw	r12, r22
     ae6:	7c 01       	movw	r14, r24
     ae8:	0e 94 38 0a 	call	0x1470	; 0x1470 <__fixunssfsi>
     aec:	c6 2f       	mov	r28, r22
		GLCD_DisplayCharacter((char)(48+Digit));
     aee:	80 e3       	ldi	r24, 0x30	; 48
     af0:	8c 0f       	add	r24, r28
     af2:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <GLCD_DisplayCharacter>
		DecimalPart = ((DecimalPart*10.0) - Digit);
     af6:	6c 2f       	mov	r22, r28
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__floatsisf>
     b02:	9b 01       	movw	r18, r22
     b04:	ac 01       	movw	r20, r24
     b06:	c7 01       	movw	r24, r14
     b08:	b6 01       	movw	r22, r12
     b0a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__subsf3>
	u16 IntegerPart = (u16)Data;
	GLCD_DisplayInteger(IntegerPart);
	GLCD_DisplayCharacter('.');
	f32 DecimalPart = (Data - IntegerPart);
	u8 Digit = 0;
	for (u8 i = 0; i < 3; i++) {
     b0e:	df 5f       	subi	r29, 0xFF	; 255
     b10:	d3 30       	cpi	r29, 0x03	; 3
     b12:	10 f3       	brcs	.-60     	; 0xad8 <GLCD_DisplayFloatingPoint+0x48>
		Digit = (u8)(DecimalPart * 10.0);
		GLCD_DisplayCharacter((char)(48+Digit));
		DecimalPart = ((DecimalPart*10.0) - Digit);
	}
}
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	df 90       	pop	r13
     b1e:	cf 90       	pop	r12
     b20:	bf 90       	pop	r11
     b22:	af 90       	pop	r10
     b24:	9f 90       	pop	r9
     b26:	8f 90       	pop	r8
     b28:	08 95       	ret

00000b2a <GLCD_GoToLineP0>:

void GLCD_GoToLineP0(u8 Line) {
     b2a:	cf 93       	push	r28
	if (Line < GLCD_MAX_LINES) {
     b2c:	88 30       	cpi	r24, 0x08	; 8
     b2e:	78 f4       	brcc	.+30     	; 0xb4e <GLCD_GoToLineP0+0x24>
     b30:	c8 2f       	mov	r28, r24
		GLCD_SelectPage(GLCD_PAGE_0);
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <GLCD_SelectPage>
		Current_X_Address = Line;
     b38:	c0 93 b6 00 	sts	0x00B6, r28	; 0x8000b6 <Current_X_Address>
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + Current_X_Address);
     b3c:	88 eb       	ldi	r24, 0xB8	; 184
     b3e:	8c 0f       	add	r24, r28
     b40:	0e 94 08 02 	call	0x410	; 0x410 <GLCD_SendInstruction>
		Current_Y_Address = 0;
     b44:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <Current_Y_Address>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + Current_Y_Address);
     b48:	80 e4       	ldi	r24, 0x40	; 64
     b4a:	0e 94 08 02 	call	0x410	; 0x410 <GLCD_SendInstruction>
	}
}
     b4e:	cf 91       	pop	r28
     b50:	08 95       	ret

00000b52 <GLCD_GoToLineP1>:

void GLCD_GoToLineP1(u8 Line) {
     b52:	cf 93       	push	r28
	if (Line < GLCD_MAX_LINES) {
     b54:	88 30       	cpi	r24, 0x08	; 8
     b56:	78 f4       	brcc	.+30     	; 0xb76 <GLCD_GoToLineP1+0x24>
     b58:	c8 2f       	mov	r28, r24
		GLCD_SelectPage(GLCD_PAGE_1);
     b5a:	82 e0       	ldi	r24, 0x02	; 2
     b5c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <GLCD_SelectPage>
		Current_X_Address = 0;
     b60:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <Current_X_Address>
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + Current_X_Address);
     b64:	88 eb       	ldi	r24, 0xB8	; 184
     b66:	0e 94 08 02 	call	0x410	; 0x410 <GLCD_SendInstruction>
		Current_Y_Address = Line;
     b6a:	c0 93 b5 00 	sts	0x00B5, r28	; 0x8000b5 <Current_Y_Address>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + Current_Y_Address);
     b6e:	80 e4       	ldi	r24, 0x40	; 64
     b70:	8c 0f       	add	r24, r28
     b72:	0e 94 08 02 	call	0x410	; 0x410 <GLCD_SendInstruction>
	}
}
     b76:	cf 91       	pop	r28
     b78:	08 95       	ret

00000b7a <GLCD_ClearDisplay>:


void GLCD_ClearDisplay(void) {
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
	for (u8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
     b7e:	d0 e0       	ldi	r29, 0x00	; 0
     b80:	13 c0       	rjmp	.+38     	; 0xba8 <GLCD_ClearDisplay+0x2e>
		GLCD_GoToLineP0(Line);
     b82:	8d 2f       	mov	r24, r29
     b84:	0e 94 95 05 	call	0xb2a	; 0xb2a <GLCD_GoToLineP0>
		GLCD_SelectPage(GLCD_BOTH_PAGES);
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <GLCD_SelectPage>
		for (u8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
     b8e:	c0 e0       	ldi	r28, 0x00	; 0
     b90:	08 c0       	rjmp	.+16     	; 0xba2 <GLCD_ClearDisplay+0x28>
			GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + i);
     b92:	80 e4       	ldi	r24, 0x40	; 64
     b94:	8c 0f       	add	r24, r28
     b96:	0e 94 08 02 	call	0x410	; 0x410 <GLCD_SendInstruction>
			GLCD_SendData(0);
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <GLCD_SendData>

void GLCD_ClearDisplay(void) {
	for (u8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
		GLCD_GoToLineP0(Line);
		GLCD_SelectPage(GLCD_BOTH_PAGES);
		for (u8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
     ba0:	cf 5f       	subi	r28, 0xFF	; 255
     ba2:	c0 34       	cpi	r28, 0x40	; 64
     ba4:	b0 f3       	brcs	.-20     	; 0xb92 <GLCD_ClearDisplay+0x18>
	}
}


void GLCD_ClearDisplay(void) {
	for (u8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
     ba6:	df 5f       	subi	r29, 0xFF	; 255
     ba8:	d8 30       	cpi	r29, 0x08	; 8
     baa:	58 f3       	brcs	.-42     	; 0xb82 <GLCD_ClearDisplay+0x8>
		for (u8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
			GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + i);
			GLCD_SendData(0);
		}
	}
	GLCD_Reset();
     bac:	0e 94 89 02 	call	0x512	; 0x512 <GLCD_Reset>
	GLCD_SelectPage(GLCD_PAGE_0);
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <GLCD_SelectPage>
	Current_Page = 0;
     bb6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__data_end>
	GLCD_GoToLineP0(0);
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	0e 94 95 05 	call	0xb2a	; 0xb2a <GLCD_GoToLineP0>
}
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <ICU_Init>:

/* MCAL */
#include "ICU_interface.h"
#include "ICU_config.h"

void ICU_Init(const ICU_Config* Config_Ptr) {
     bc6:	fc 01       	movw	r30, r24
	/* Set ICP1 Pin (on PD6) as Input to trigger the ICU */
	
	CLR_BIT(*PORTD_DIR_REG, 6U);
     bc8:	81 b3       	in	r24, 0x11	; 17
     bca:	8f 7b       	andi	r24, 0xBF	; 191
     bcc:	81 bb       	out	0x11, r24	; 17
	
	/* Clear Configurations on TCCR1A and TCCR1B */
	
	*TIMER1_CTRL_REG_A = 0x00U;
     bce:	1f bc       	out	0x2f, r1	; 47
	*TIMER1_CTRL_REG_B = 0x00U;
     bd0:	1e bc       	out	0x2e, r1	; 46
	
	/* Timer 1 mode is set to normal */
	
	/* Set Prescaler */
	
	*TIMER1_CTRL_REG_B |= (Config_Ptr->Clk_Prescale);
     bd2:	9e b5       	in	r25, 0x2e	; 46
     bd4:	81 81       	ldd	r24, Z+1	; 0x01
     bd6:	89 2b       	or	r24, r25
     bd8:	8e bd       	out	0x2e, r24	; 46
	
	/* Set Trigger Edge (Falling or Rising) */
	
	*TIMER1_CTRL_REG_B |= ((Config_Ptr->Trigger_Edge)<<ICU_TIMER1_EDGE_SELECT_BIT);
     bda:	8e b5       	in	r24, 0x2e	; 46
     bdc:	92 81       	ldd	r25, Z+2	; 0x02
     bde:	40 e4       	ldi	r20, 0x40	; 64
     be0:	94 9f       	mul	r25, r20
     be2:	90 01       	movw	r18, r0
     be4:	11 24       	eor	r1, r1
     be6:	28 2b       	or	r18, r24
     be8:	2e bd       	out	0x2e, r18	; 46
	
	/* Set Interrupt State */
	
	*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<ICU_TIMER1_INT_BIT);
     bea:	29 b7       	in	r18, 0x39	; 57
     bec:	93 81       	ldd	r25, Z+3	; 0x03
     bee:	30 e2       	ldi	r19, 0x20	; 32
     bf0:	93 9f       	mul	r25, r19
     bf2:	c0 01       	movw	r24, r0
     bf4:	11 24       	eor	r1, r1
     bf6:	82 2b       	or	r24, r18
     bf8:	89 bf       	out	0x39, r24	; 57
	
	/* Clear Timer 1 and ICR Values */
	
	*(u16*)TIMER1_CNTR_REG_L = 0x0000U;
     bfa:	1d bc       	out	0x2d, r1	; 45
     bfc:	1c bc       	out	0x2c, r1	; 44
	*(u16*)TIMER1_INP_CAPT_REG_L = 0x0000U;
     bfe:	17 bc       	out	0x27, r1	; 39
     c00:	16 bc       	out	0x26, r1	; 38
     c02:	08 95       	ret

00000c04 <ICU_SetTriggerEdge>:
}

void ICU_SetTriggerEdge(ICU_TimerChannelNo Timer_Chnl, ICU_TriggerEdgeType Edge) {
	CLR_BIT(*TIMER1_CTRL_REG_B, ICU_TIMER1_EDGE_SELECT_BIT);
     c04:	9e b5       	in	r25, 0x2e	; 46
     c06:	9f 7b       	andi	r25, 0xBF	; 191
     c08:	9e bd       	out	0x2e, r25	; 46
	*TIMER1_CTRL_REG_B |= (Edge<<ICU_TIMER1_EDGE_SELECT_BIT);
     c0a:	9e b5       	in	r25, 0x2e	; 46
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	68 9f       	mul	r22, r24
     c10:	b0 01       	movw	r22, r0
     c12:	11 24       	eor	r1, r1
     c14:	69 2b       	or	r22, r25
     c16:	6e bd       	out	0x2e, r22	; 46
     c18:	08 95       	ret

00000c1a <ICU_ClearTimerValue>:

}

void ICU_ClearTimerValue(ICU_TimerChannelNo Timer_Chnl) {
	
	*(u16*)TIMER1_CNTR_REG_L = 0x0000U;
     c1a:	1d bc       	out	0x2d, r1	; 45
     c1c:	1c bc       	out	0x2c, r1	; 44
     c1e:	08 95       	ret

00000c20 <ICU_GetICUValue>:
	u16 u16Local_Value = 0U;
	u16Local_Value = (*(u16*)TIMER1_INP_CAPT_REG_L);

	
	return u16Local_Value;
}
     c20:	86 b5       	in	r24, 0x26	; 38
     c22:	97 b5       	in	r25, 0x27	; 39
     c24:	08 95       	ret

00000c26 <ICU_GetStatus>:



ICU_StatusType ICU_GetStatus(ICU_TimerChannelNo Timer_Chnl) {
	
	if (GET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT) == 1) {
     c26:	08 b6       	in	r0, 0x38	; 56
     c28:	05 fe       	sbrs	r0, 5
     c2a:	05 c0       	rjmp	.+10     	; 0xc36 <ICU_GetStatus+0x10>
		SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);  /* Clear Flag */
     c2c:	88 b7       	in	r24, 0x38	; 56
     c2e:	80 62       	ori	r24, 0x20	; 32
     c30:	88 bf       	out	0x38, r24	; 56
		return ICU_EVENT_CATURED;
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	08 95       	ret
	}
	
	else {
		return ICU_RUNNING;
     c36:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return ICU_RUNNING;
}
     c38:	08 95       	ret

00000c3a <ICU_GetDutyCycle>:




void ICU_GetDutyCycle(ICU_TimerChannelNo Timer_Chnl, u16 Prescale_Value, ICU_DutyCycleType* Duty_Ptr) {
     c3a:	4f 92       	push	r4
     c3c:	5f 92       	push	r5
     c3e:	6f 92       	push	r6
     c40:	7f 92       	push	r7
     c42:	8f 92       	push	r8
     c44:	9f 92       	push	r9
     c46:	af 92       	push	r10
     c48:	bf 92       	push	r11
     c4a:	cf 92       	push	r12
     c4c:	df 92       	push	r13
     c4e:	ef 92       	push	r14
     c50:	ff 92       	push	r15
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	eb 01       	movw	r28, r22
     c5c:	8a 01       	movw	r16, r20
	/* Clear Input Capture Flag for safety */
	
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
     c5e:	88 b7       	in	r24, 0x38	; 56
     c60:	80 62       	ori	r24, 0x20	; 32
     c62:	88 bf       	out	0x38, r24	; 56
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
     c64:	61 e0       	ldi	r22, 0x01	; 1
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	0e 94 02 06 	call	0xc04	; 0xc04 <ICU_SetTriggerEdge>
	
	/* Wait for the start of the period at rising edge */
	
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	0e 94 13 06 	call	0xc26	; 0xc26 <ICU_GetStatus>
     c72:	88 23       	and	r24, r24
     c74:	d9 f3       	breq	.-10     	; 0xc6c <ICU_GetDutyCycle+0x32>
		; // Do Nothing
	}

	u32 u32Local_ON_Counts = 0;
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
     c76:	60 e0       	ldi	r22, 0x00	; 0
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	0e 94 02 06 	call	0xc04	; 0xc04 <ICU_SetTriggerEdge>
	ICU_ClearTimerValue(ICU_TIMER_1);
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	0e 94 0d 06 	call	0xc1a	; 0xc1a <ICU_ClearTimerValue>
	
	/* Clear Input Capture Flag for safety */
	
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
     c84:	88 b7       	in	r24, 0x38	; 56
     c86:	80 62       	ori	r24, 0x20	; 32
     c88:	88 bf       	out	0x38, r24	; 56
	
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
		; // Do Nothing
	}

	u32 u32Local_ON_Counts = 0;
     c8a:	c1 2c       	mov	r12, r1
     c8c:	d1 2c       	mov	r13, r1
     c8e:	76 01       	movw	r14, r12
	
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	
	/* Wait for the end of the high time at falling edge */
	
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     c90:	09 c0       	rjmp	.+18     	; 0xca4 <ICU_GetDutyCycle+0x6a>
		if (GET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
     c92:	08 b6       	in	r0, 0x38	; 56
     c94:	02 fe       	sbrs	r0, 2
     c96:	06 c0       	rjmp	.+12     	; 0xca4 <ICU_GetDutyCycle+0x6a>
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
     c98:	88 b7       	in	r24, 0x38	; 56
     c9a:	84 60       	ori	r24, 0x04	; 4
     c9c:	88 bf       	out	0x38, r24	; 56
			u32Local_ON_Counts += ICU_TIMER1_RESOLUTION;
     c9e:	8f ef       	ldi	r24, 0xFF	; 255
     ca0:	e8 1a       	sub	r14, r24
     ca2:	f8 0a       	sbc	r15, r24
	
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	
	/* Wait for the end of the high time at falling edge */
	
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	0e 94 13 06 	call	0xc26	; 0xc26 <ICU_GetStatus>
     caa:	88 23       	and	r24, r24
     cac:	91 f3       	breq	.-28     	; 0xc92 <ICU_GetDutyCycle+0x58>
		if (GET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
			u32Local_ON_Counts += ICU_TIMER1_RESOLUTION;
		}
	}
	u32Local_ON_Counts += ICU_GetICUValue(ICU_TIMER_1);
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	0e 94 10 06 	call	0xc20	; 0xc20 <ICU_GetICUValue>
     cb4:	c8 0e       	add	r12, r24
     cb6:	d9 1e       	adc	r13, r25
     cb8:	e1 1c       	adc	r14, r1
     cba:	f1 1c       	adc	r15, r1

	u32 u32Local_OFF_Counts = 0;
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
     cbc:	61 e0       	ldi	r22, 0x01	; 1
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	0e 94 02 06 	call	0xc04	; 0xc04 <ICU_SetTriggerEdge>
	ICU_ClearTimerValue(ICU_TIMER_1);
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	0e 94 0d 06 	call	0xc1a	; 0xc1a <ICU_ClearTimerValue>
	
	/* Clear Input Capture Flag for safety */
	
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
     cca:	88 b7       	in	r24, 0x38	; 56
     ccc:	80 62       	ori	r24, 0x20	; 32
     cce:	88 bf       	out	0x38, r24	; 56
	
	/* Wait for the end of the period at rising edge */
	
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     cd0:	06 c0       	rjmp	.+12     	; 0xcde <ICU_GetDutyCycle+0xa4>
		if (GET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
     cd2:	08 b6       	in	r0, 0x38	; 56
     cd4:	02 fe       	sbrs	r0, 2
     cd6:	03 c0       	rjmp	.+6      	; 0xcde <ICU_GetDutyCycle+0xa4>
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
     cd8:	88 b7       	in	r24, 0x38	; 56
     cda:	84 60       	ori	r24, 0x04	; 4
     cdc:	88 bf       	out	0x38, r24	; 56
	
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	
	/* Wait for the end of the period at rising edge */
	
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	0e 94 13 06 	call	0xc26	; 0xc26 <ICU_GetStatus>
     ce4:	88 23       	and	r24, r24
     ce6:	a9 f3       	breq	.-22     	; 0xcd2 <ICU_GetDutyCycle+0x98>
		if (GET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
			u32Local_OFF_Counts += ICU_TIMER1_RESOLUTION;
		}
	}
	u32Local_OFF_Counts = ICU_GetICUValue(ICU_TIMER_1);
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	0e 94 10 06 	call	0xc20	; 0xc20 <ICU_GetICUValue>
     cee:	4c 01       	movw	r8, r24
     cf0:	a1 2c       	mov	r10, r1
     cf2:	b1 2c       	mov	r11, r1

	Duty_Ptr->High_Time = (f32)(u32Local_ON_Counts * Prescale_Value * 1000.0 / F_CPU);
     cf4:	2e 01       	movw	r4, r28
     cf6:	61 2c       	mov	r6, r1
     cf8:	71 2c       	mov	r7, r1
     cfa:	a7 01       	movw	r20, r14
     cfc:	96 01       	movw	r18, r12
     cfe:	c3 01       	movw	r24, r6
     d00:	b2 01       	movw	r22, r4
     d02:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__mulsi3>
     d06:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__floatunsisf>
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	4a e7       	ldi	r20, 0x7A	; 122
     d10:	54 e4       	ldi	r21, 0x44	; 68
     d12:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__mulsf3>
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	34 e2       	ldi	r19, 0x24	; 36
     d1a:	44 e7       	ldi	r20, 0x74	; 116
     d1c:	5b e4       	ldi	r21, 0x4B	; 75
     d1e:	0e 94 c6 09 	call	0x138c	; 0x138c <__divsf3>
     d22:	f8 01       	movw	r30, r16
     d24:	60 83       	st	Z, r22
     d26:	71 83       	std	Z+1, r23	; 0x01
     d28:	82 83       	std	Z+2, r24	; 0x02
     d2a:	93 83       	std	Z+3, r25	; 0x03
	Duty_Ptr->Period_Time = (f32)((u32Local_ON_Counts+u32Local_OFF_Counts) * Prescale_Value * 1000.0 / F_CPU);
     d2c:	c7 01       	movw	r24, r14
     d2e:	b6 01       	movw	r22, r12
     d30:	68 0d       	add	r22, r8
     d32:	79 1d       	adc	r23, r9
     d34:	8a 1d       	adc	r24, r10
     d36:	9b 1d       	adc	r25, r11
     d38:	a3 01       	movw	r20, r6
     d3a:	92 01       	movw	r18, r4
     d3c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__mulsi3>
     d40:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__floatunsisf>
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	4a e7       	ldi	r20, 0x7A	; 122
     d4a:	54 e4       	ldi	r21, 0x44	; 68
     d4c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__mulsf3>
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	34 e2       	ldi	r19, 0x24	; 36
     d54:	44 e7       	ldi	r20, 0x74	; 116
     d56:	5b e4       	ldi	r21, 0x4B	; 75
     d58:	0e 94 c6 09 	call	0x138c	; 0x138c <__divsf3>
     d5c:	f8 01       	movw	r30, r16
     d5e:	64 83       	std	Z+4, r22	; 0x04
     d60:	75 83       	std	Z+5, r23	; 0x05
     d62:	86 83       	std	Z+6, r24	; 0x06
     d64:	97 83       	std	Z+7, r25	; 0x07
}
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	ff 90       	pop	r15
     d70:	ef 90       	pop	r14
     d72:	df 90       	pop	r13
     d74:	cf 90       	pop	r12
     d76:	bf 90       	pop	r11
     d78:	af 90       	pop	r10
     d7a:	9f 90       	pop	r9
     d7c:	8f 90       	pop	r8
     d7e:	7f 90       	pop	r7
     d80:	6f 90       	pop	r6
     d82:	5f 90       	pop	r5
     d84:	4f 90       	pop	r4
     d86:	08 95       	ret

00000d88 <main>:
	}
};


int main(void)
{
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	61 97       	sbiw	r28, 0x11	; 17
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	f8 94       	cli
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	cd bf       	out	0x3d, r28	; 61
	PWMDrawer_Init();
     d9c:	0e 94 f5 06 	call	0xdea	; 0xdea <PWMDrawer_Init>
	PWM_Signal_SetUp Signal_Data = {0, 0, 0, 0, 0};
     da0:	fe 01       	movw	r30, r28
     da2:	31 96       	adiw	r30, 0x01	; 1
     da4:	81 e1       	ldi	r24, 0x11	; 17
     da6:	df 01       	movw	r26, r30
     da8:	1d 92       	st	X+, r1
     daa:	8a 95       	dec	r24
     dac:	e9 f7       	brne	.-6      	; 0xda8 <main+0x20>
	f32 Scale_ms = 0.25;
	
	while(1)
	{
		
		PWM_MeasureSignal(&Signal_Data);
     dae:	ce 01       	movw	r24, r28
     db0:	01 96       	adiw	r24, 0x01	; 1
     db2:	0e 94 02 07 	call	0xe04	; 0xe04 <PWM_MeasureSignal>
		Scale_ms=((Signal_Data.Period_Time_ms) / 5);
     db6:	6a 85       	ldd	r22, Y+10	; 0x0a
     db8:	7b 85       	ldd	r23, Y+11	; 0x0b
     dba:	8c 85       	ldd	r24, Y+12	; 0x0c
     dbc:	9d 85       	ldd	r25, Y+13	; 0x0d
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	40 ea       	ldi	r20, 0xA0	; 160
     dc4:	50 e4       	ldi	r21, 0x40	; 64
     dc6:	0e 94 c6 09 	call	0x138c	; 0x138c <__divsf3>
     dca:	ab 01       	movw	r20, r22
     dcc:	bc 01       	movw	r22, r24
		PWM_DrawSignal(&Signal_Data, Scale_ms);
     dce:	ce 01       	movw	r24, r28
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	0e 94 68 07 	call	0xed0	; 0xed0 <PWM_DrawSignal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dd6:	bf ef       	ldi	r27, 0xFF	; 255
     dd8:	23 ed       	ldi	r18, 0xD3	; 211
     dda:	80 e3       	ldi	r24, 0x30	; 48
     ddc:	b1 50       	subi	r27, 0x01	; 1
     dde:	20 40       	sbci	r18, 0x00	; 0
     de0:	80 40       	sbci	r24, 0x00	; 0
     de2:	e1 f7       	brne	.-8      	; 0xddc <main+0x54>
     de4:	00 c0       	rjmp	.+0      	; 0xde6 <main+0x5e>
     de6:	00 00       	nop
     de8:	e2 cf       	rjmp	.-60     	; 0xdae <main+0x26>

00000dea <PWMDrawer_Init>:



void PWMDrawer_Init(void) {

	GLCD_init();
     dea:	0e 94 27 02 	call	0x44e	; 0x44e <GLCD_init>
	GLCD_ClearDisplay();
     dee:	0e 94 bd 05 	call	0xb7a	; 0xb7a <GLCD_ClearDisplay>
	PWM_Init(&PWM_Setup[0]);		// Use Timer 0 to generate PWM on OC0=PB3
     df2:	8b e9       	ldi	r24, 0x9B	; 155
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 dd 08 	call	0x11ba	; 0x11ba <PWM_Init>
	ICU_Init(&ICU_SetUp);			// Timer 1 is used for Input Capture to get the PWM Signal
     dfa:	87 e9       	ldi	r24, 0x97	; 151
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <ICU_Init>
     e02:	08 95       	ret

00000e04 <PWM_MeasureSignal>:
}

void PWM_MeasureSignal(PWM_Signal_SetUp* PWM_ptr) {
     e04:	8f 92       	push	r8
     e06:	9f 92       	push	r9
     e08:	af 92       	push	r10
     e0a:	bf 92       	push	r11
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	28 97       	sbiw	r28, 0x08	; 8
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	8c 01       	movw	r16, r24
	ICU_DutyCycleType Duty_Cycle_EXM = {0, 0};
     e2e:	19 82       	std	Y+1, r1	; 0x01
     e30:	1a 82       	std	Y+2, r1	; 0x02
     e32:	1b 82       	std	Y+3, r1	; 0x03
     e34:	1c 82       	std	Y+4, r1	; 0x04
     e36:	1d 82       	std	Y+5, r1	; 0x05
     e38:	1e 82       	std	Y+6, r1	; 0x06
     e3a:	1f 82       	std	Y+7, r1	; 0x07
     e3c:	18 86       	std	Y+8, r1	; 0x08
	ICU_GetDutyCycle(ICU_TIMER_1, 8U, &Duty_Cycle_EXM);
     e3e:	ae 01       	movw	r20, r28
     e40:	4f 5f       	subi	r20, 0xFF	; 255
     e42:	5f 4f       	sbci	r21, 0xFF	; 255
     e44:	68 e0       	ldi	r22, 0x08	; 8
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <ICU_GetDutyCycle>
	PWM_ptr->Period_Time_ms = Duty_Cycle_EXM.Period_Time;
     e4e:	cd 80       	ldd	r12, Y+5	; 0x05
     e50:	de 80       	ldd	r13, Y+6	; 0x06
     e52:	ef 80       	ldd	r14, Y+7	; 0x07
     e54:	f8 84       	ldd	r15, Y+8	; 0x08
     e56:	f8 01       	movw	r30, r16
     e58:	c1 86       	std	Z+9, r12	; 0x09
     e5a:	d2 86       	std	Z+10, r13	; 0x0a
     e5c:	e3 86       	std	Z+11, r14	; 0x0b
     e5e:	f4 86       	std	Z+12, r15	; 0x0c
	PWM_ptr->High_Time_ms = Duty_Cycle_EXM.High_Time;
     e60:	89 80       	ldd	r8, Y+1	; 0x01
     e62:	9a 80       	ldd	r9, Y+2	; 0x02
     e64:	ab 80       	ldd	r10, Y+3	; 0x03
     e66:	bc 80       	ldd	r11, Y+4	; 0x04
     e68:	81 82       	std	Z+1, r8	; 0x01
     e6a:	92 82       	std	Z+2, r9	; 0x02
     e6c:	a3 82       	std	Z+3, r10	; 0x03
     e6e:	b4 82       	std	Z+4, r11	; 0x04
	
	PWM_ptr->Freq_kHz = (1.0 / (PWM_ptr->Period_Time_ms));
     e70:	a7 01       	movw	r20, r14
     e72:	96 01       	movw	r18, r12
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	80 e8       	ldi	r24, 0x80	; 128
     e7a:	9f e3       	ldi	r25, 0x3F	; 63
     e7c:	0e 94 c6 09 	call	0x138c	; 0x138c <__divsf3>
     e80:	f8 01       	movw	r30, r16
     e82:	65 87       	std	Z+13, r22	; 0x0d
     e84:	76 87       	std	Z+14, r23	; 0x0e
     e86:	87 87       	std	Z+15, r24	; 0x0f
     e88:	90 8b       	std	Z+16, r25	; 0x10
	PWM_ptr->Duty_Percent = (u8)((PWM_ptr->High_Time_ms) * 100.0 / (PWM_ptr->Period_Time_ms));
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	48 ec       	ldi	r20, 0xC8	; 200
     e90:	52 e4       	ldi	r21, 0x42	; 66
     e92:	c5 01       	movw	r24, r10
     e94:	b4 01       	movw	r22, r8
     e96:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__mulsf3>
     e9a:	a7 01       	movw	r20, r14
     e9c:	96 01       	movw	r18, r12
     e9e:	0e 94 c6 09 	call	0x138c	; 0x138c <__divsf3>
     ea2:	0e 94 38 0a 	call	0x1470	; 0x1470 <__fixunssfsi>
     ea6:	f8 01       	movw	r30, r16
     ea8:	60 83       	st	Z, r22
}
     eaa:	28 96       	adiw	r28, 0x08	; 8
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	cd bf       	out	0x3d, r28	; 61
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	1f 91       	pop	r17
     ebc:	0f 91       	pop	r16
     ebe:	ff 90       	pop	r15
     ec0:	ef 90       	pop	r14
     ec2:	df 90       	pop	r13
     ec4:	cf 90       	pop	r12
     ec6:	bf 90       	pop	r11
     ec8:	af 90       	pop	r10
     eca:	9f 90       	pop	r9
     ecc:	8f 90       	pop	r8
     ece:	08 95       	ret

00000ed0 <PWM_DrawSignal>:

void PWM_DrawSignal(PWM_Signal_SetUp* Signal_Data_Ptr, f32 Scale_ms) {
     ed0:	8f 92       	push	r8
     ed2:	9f 92       	push	r9
     ed4:	af 92       	push	r10
     ed6:	bf 92       	push	r11
     ed8:	ef 92       	push	r14
     eda:	ff 92       	push	r15
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	ec 97       	sbiw	r28, 0x3c	; 60
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	7c 01       	movw	r14, r24
     ef6:	4a 01       	movw	r8, r20
     ef8:	5b 01       	movw	r10, r22
	
	
	
	GLCD_ClearDisplay(); 
     efa:	0e 94 bd 05 	call	0xb7a	; 0xb7a <GLCD_ClearDisplay>
	
	// Display Creator Name on Line 0 Page 0
	
	GLCD_GoToLineP0(0);
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	0e 94 95 05 	call	0xb2a	; 0xb2a <GLCD_GoToLineP0>
	char creator= "SALMA";
	GLCD_DisplayString(creator);
     f04:	82 ea       	ldi	r24, 0xA2	; 162
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	99 27       	eor	r25, r25
     f0a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GLCD_DisplayString>
	
	// Display  Frequency on Line 2 Page 0  
	
	GLCD_GoToLineP0(2);
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	0e 94 95 05 	call	0xb2a	; 0xb2a <GLCD_GoToLineP0>
	char FreqKHz[15] = "Freq=\0";
     f14:	87 e0       	ldi	r24, 0x07	; 7
     f16:	e0 e6       	ldi	r30, 0x60	; 96
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	de 01       	movw	r26, r28
     f1c:	11 96       	adiw	r26, 0x01	; 1
     f1e:	01 90       	ld	r0, Z+
     f20:	0d 92       	st	X+, r0
     f22:	8a 95       	dec	r24
     f24:	e1 f7       	brne	.-8      	; 0xf1e <PWM_DrawSignal+0x4e>
     f26:	18 e0       	ldi	r17, 0x08	; 8
     f28:	fe 01       	movw	r30, r28
     f2a:	38 96       	adiw	r30, 0x08	; 8
     f2c:	df 01       	movw	r26, r30
     f2e:	81 2f       	mov	r24, r17
     f30:	1d 92       	st	X+, r1
     f32:	8a 95       	dec	r24
     f34:	e9 f7       	brne	.-6      	; 0xf30 <PWM_DrawSignal+0x60>
	GLCD_DisplayString(FreqKHz);
     f36:	ce 01       	movw	r24, r28
     f38:	01 96       	adiw	r24, 0x01	; 1
     f3a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GLCD_DisplayString>
	GLCD_DisplayFloatingPoint(Signal_Data_Ptr->Freq_kHz);
     f3e:	d7 01       	movw	r26, r14
     f40:	1d 96       	adiw	r26, 0x0d	; 13
     f42:	6d 91       	ld	r22, X+
     f44:	7d 91       	ld	r23, X+
     f46:	8d 91       	ld	r24, X+
     f48:	9c 91       	ld	r25, X
     f4a:	50 97       	sbiw	r26, 0x10	; 16
     f4c:	0e 94 48 05 	call	0xa90	; 0xa90 <GLCD_DisplayFloatingPoint>
	char KHz[5] = " kHz\0";
     f50:	85 e0       	ldi	r24, 0x05	; 5
     f52:	ee ea       	ldi	r30, 0xAE	; 174
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	de 01       	movw	r26, r28
     f58:	50 96       	adiw	r26, 0x10	; 16
     f5a:	01 90       	ld	r0, Z+
     f5c:	0d 92       	st	X+, r0
     f5e:	8a 95       	dec	r24
     f60:	e1 f7       	brne	.-8      	; 0xf5a <PWM_DrawSignal+0x8a>
	GLCD_DisplayString(KHz);
     f62:	ce 01       	movw	r24, r28
     f64:	40 96       	adiw	r24, 0x10	; 16
     f66:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GLCD_DisplayString>

	// Display Duty cycle percentage on line 0 Page 1
	
	GLCD_GoToLineP1(0);
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	0e 94 a9 05 	call	0xb52	; 0xb52 <GLCD_GoToLineP1>
	char Duty_Val[15] = "Duty=\0";
     f70:	87 e0       	ldi	r24, 0x07	; 7
     f72:	ef e6       	ldi	r30, 0x6F	; 111
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	de 01       	movw	r26, r28
     f78:	55 96       	adiw	r26, 0x15	; 21
     f7a:	01 90       	ld	r0, Z+
     f7c:	0d 92       	st	X+, r0
     f7e:	8a 95       	dec	r24
     f80:	e1 f7       	brne	.-8      	; 0xf7a <PWM_DrawSignal+0xaa>
     f82:	fe 01       	movw	r30, r28
     f84:	7c 96       	adiw	r30, 0x1c	; 28
     f86:	df 01       	movw	r26, r30
     f88:	1d 92       	st	X+, r1
     f8a:	1a 95       	dec	r17
     f8c:	e9 f7       	brne	.-6      	; 0xf88 <PWM_DrawSignal+0xb8>
	GLCD_DisplayString(Duty_Val);
     f8e:	ce 01       	movw	r24, r28
     f90:	45 96       	adiw	r24, 0x15	; 21
     f92:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GLCD_DisplayString>
	GLCD_DisplayInteger(Signal_Data_Ptr->Duty_Percent);
     f96:	f7 01       	movw	r30, r14
     f98:	60 81       	ld	r22, Z
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <GLCD_DisplayInteger>
	char Percent[5] = " %\0";
     fa4:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
     fa8:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <__DATA_REGION_ORIGIN__+0x1f>
     fac:	9d a3       	std	Y+37, r25	; 0x25
     fae:	8c a3       	std	Y+36, r24	; 0x24
     fb0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     fb4:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     fb8:	9f a3       	std	Y+39, r25	; 0x27
     fba:	8e a3       	std	Y+38, r24	; 0x26
     fbc:	18 a6       	std	Y+40, r1	; 0x28
	GLCD_DisplayString(Percent);
     fbe:	ce 01       	movw	r24, r28
     fc0:	84 96       	adiw	r24, 0x24	; 36
     fc2:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GLCD_DisplayString>


	// Display Time in ms on Line 4 Page 0 
	
	GLCD_GoToLineP0(4);
     fc6:	84 e0       	ldi	r24, 0x04	; 4
     fc8:	0e 94 95 05 	call	0xb2a	; 0xb2a <GLCD_GoToLineP0>
	char Time_in_ms[15] = "     Time=\0";
     fcc:	8c e0       	ldi	r24, 0x0C	; 12
     fce:	e3 e8       	ldi	r30, 0x83	; 131
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	de 01       	movw	r26, r28
     fd4:	99 96       	adiw	r26, 0x29	; 41
     fd6:	01 90       	ld	r0, Z+
     fd8:	0d 92       	st	X+, r0
     fda:	8a 95       	dec	r24
     fdc:	e1 f7       	brne	.-8      	; 0xfd6 <PWM_DrawSignal+0x106>
     fde:	fe 01       	movw	r30, r28
     fe0:	f5 96       	adiw	r30, 0x35	; 53
     fe2:	83 e0       	ldi	r24, 0x03	; 3
     fe4:	df 01       	movw	r26, r30
     fe6:	1d 92       	st	X+, r1
     fe8:	8a 95       	dec	r24
     fea:	e9 f7       	brne	.-6      	; 0xfe6 <PWM_DrawSignal+0x116>
	GLCD_DisplayString(Time_in_ms);
     fec:	ce 01       	movw	r24, r28
     fee:	89 96       	adiw	r24, 0x29	; 41
     ff0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GLCD_DisplayString>
	GLCD_DisplayFloatingPoint(Signal_Data_Ptr->Period_Time_ms);
     ff4:	f7 01       	movw	r30, r14
     ff6:	61 85       	ldd	r22, Z+9	; 0x09
     ff8:	72 85       	ldd	r23, Z+10	; 0x0a
     ffa:	83 85       	ldd	r24, Z+11	; 0x0b
     ffc:	94 85       	ldd	r25, Z+12	; 0x0c
     ffe:	0e 94 48 05 	call	0xa90	; 0xa90 <GLCD_DisplayFloatingPoint>
	char milisecs[5] = "ms\0";
    1002:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__DATA_REGION_ORIGIN__+0x32>
    1006:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <__DATA_REGION_ORIGIN__+0x33>
    100a:	99 af       	std	Y+57, r25	; 0x39
    100c:	88 af       	std	Y+56, r24	; 0x38
    100e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
    1012:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
    1016:	9b af       	std	Y+59, r25	; 0x3b
    1018:	8a af       	std	Y+58, r24	; 0x3a
    101a:	1c ae       	std	Y+60, r1	; 0x3c
	GLCD_DisplayString(milisecs);
    101c:	ce 01       	movw	r24, r28
    101e:	c8 96       	adiw	r24, 0x38	; 56
    1020:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GLCD_DisplayString>
	
	// Display Arrow for Time Period on Line 5 
	
	GLCD_GoToLineP0(5);
    1024:	85 e0       	ldi	r24, 0x05	; 5
    1026:	0e 94 95 05 	call	0xb2a	; 0xb2a <GLCD_GoToLineP0>
	char space="     ";
	GLCD_DisplayString(space);
    102a:	88 ea       	ldi	r24, 0xA8	; 168
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	99 27       	eor	r25, r25
    1030:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GLCD_DisplayString>
	GLCD_DisplaySpecialPattern( PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	3e e3       	ldi	r19, 0x3E	; 62
    1038:	48 e0       	ldi	r20, 0x08	; 8
    103a:	5c e1       	ldi	r21, 0x1C	; 28
    103c:	6a e2       	ldi	r22, 0x2A	; 42
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
	for (int i = 0; i < ((u8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    1048:	00 e0       	ldi	r16, 0x00	; 0
    104a:	10 e0       	ldi	r17, 0x00	; 0
    104c:	0c c0       	rjmp	.+24     	; 0x1066 <PWM_DrawSignal+0x196>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
    104e:	28 e0       	ldi	r18, 0x08	; 8
    1050:	38 e0       	ldi	r19, 0x08	; 8
    1052:	48 e0       	ldi	r20, 0x08	; 8
    1054:	58 e0       	ldi	r21, 0x08	; 8
    1056:	68 e0       	ldi	r22, 0x08	; 8
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
	
	GLCD_GoToLineP0(5);
	char space="     ";
	GLCD_DisplayString(space);
	GLCD_DisplaySpecialPattern( PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
	for (int i = 0; i < ((u8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    1062:	0f 5f       	subi	r16, 0xFF	; 255
    1064:	1f 4f       	sbci	r17, 0xFF	; 255
    1066:	d7 01       	movw	r26, r14
    1068:	11 96       	adiw	r26, 0x01	; 1
    106a:	6d 91       	ld	r22, X+
    106c:	7d 91       	ld	r23, X+
    106e:	8d 91       	ld	r24, X+
    1070:	9c 91       	ld	r25, X
    1072:	14 97       	sbiw	r26, 0x04	; 4
    1074:	a5 01       	movw	r20, r10
    1076:	94 01       	movw	r18, r8
    1078:	0e 94 c6 09 	call	0x138c	; 0x138c <__divsf3>
    107c:	0e 94 38 0a 	call	0x1470	; 0x1470 <__fixunssfsi>
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	06 17       	cp	r16, r22
    1084:	17 07       	cpc	r17, r23
    1086:	1c f3       	brlt	.-58     	; 0x104e <PWM_DrawSignal+0x17e>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
    1088:	28 e0       	ldi	r18, 0x08	; 8
    108a:	38 e0       	ldi	r19, 0x08	; 8
    108c:	48 e0       	ldi	r20, 0x08	; 8
    108e:	58 e0       	ldi	r21, 0x08	; 8
    1090:	68 e0       	ldi	r22, 0x08	; 8
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
	for (int i = 0; i < ((u8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    109c:	00 e0       	ldi	r16, 0x00	; 0
    109e:	10 e0       	ldi	r17, 0x00	; 0
    10a0:	0c c0       	rjmp	.+24     	; 0x10ba <PWM_DrawSignal+0x1ea>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
    10a2:	28 e0       	ldi	r18, 0x08	; 8
    10a4:	38 e0       	ldi	r19, 0x08	; 8
    10a6:	48 e0       	ldi	r20, 0x08	; 8
    10a8:	58 e0       	ldi	r21, 0x08	; 8
    10aa:	68 e0       	ldi	r22, 0x08	; 8
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
	GLCD_DisplaySpecialPattern( PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
	for (int i = 0; i < ((u8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	for (int i = 0; i < ((u8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    10b6:	0f 5f       	subi	r16, 0xFF	; 255
    10b8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ba:	f7 01       	movw	r30, r14
    10bc:	65 81       	ldd	r22, Z+5	; 0x05
    10be:	76 81       	ldd	r23, Z+6	; 0x06
    10c0:	87 81       	ldd	r24, Z+7	; 0x07
    10c2:	90 85       	ldd	r25, Z+8	; 0x08
    10c4:	a5 01       	movw	r20, r10
    10c6:	94 01       	movw	r18, r8
    10c8:	0e 94 c6 09 	call	0x138c	; 0x138c <__divsf3>
    10cc:	0e 94 38 0a 	call	0x1470	; 0x1470 <__fixunssfsi>
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	06 17       	cp	r16, r22
    10d4:	17 07       	cpc	r17, r23
    10d6:	2c f3       	brlt	.-54     	; 0x10a2 <PWM_DrawSignal+0x1d2>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RIGHT_ARROW_HEAD);
    10d8:	2a e2       	ldi	r18, 0x2A	; 42
    10da:	3c e1       	ldi	r19, 0x1C	; 28
    10dc:	48 e0       	ldi	r20, 0x08	; 8
    10de:	5e e3       	ldi	r21, 0x3E	; 62
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
	
	
	/* Display PWM  Signal from Line 6 */
	
	GLCD_GoToLineP0(6);
    10ec:	86 e0       	ldi	r24, 0x06	; 6
    10ee:	0e 94 95 05 	call	0xb2a	; 0xb2a <GLCD_GoToLineP0>
	u8 pixel_width_count = 0;
    10f2:	10 e0       	ldi	r17, 0x00	; 0
	u8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
    10f4:	4e c0       	rjmp	.+156    	; 0x1192 <PWM_DrawSignal+0x2c2>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
    10f6:	20 e4       	ldi	r18, 0x40	; 64
    10f8:	30 e4       	ldi	r19, 0x40	; 64
    10fa:	4e e7       	ldi	r20, 0x7E	; 126
    10fc:	52 e0       	ldi	r21, 0x02	; 2
    10fe:	62 e0       	ldi	r22, 0x02	; 2
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
    110a:	1b 5f       	subi	r17, 0xFB	; 251
		for (i = 0; i < ((u8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    110c:	00 e0       	ldi	r16, 0x00	; 0
    110e:	0c c0       	rjmp	.+24     	; 0x1128 <PWM_DrawSignal+0x258>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
    1110:	22 e0       	ldi	r18, 0x02	; 2
    1112:	32 e0       	ldi	r19, 0x02	; 2
    1114:	42 e0       	ldi	r20, 0x02	; 2
    1116:	52 e0       	ldi	r21, 0x02	; 2
    1118:	62 e0       	ldi	r22, 0x02	; 2
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
    1124:	1b 5f       	subi	r17, 0xFB	; 251
	GLCD_GoToLineP0(6);
	u8 pixel_width_count = 0;
	u8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((u8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    1126:	0f 5f       	subi	r16, 0xFF	; 255
    1128:	d7 01       	movw	r26, r14
    112a:	11 96       	adiw	r26, 0x01	; 1
    112c:	6d 91       	ld	r22, X+
    112e:	7d 91       	ld	r23, X+
    1130:	8d 91       	ld	r24, X+
    1132:	9c 91       	ld	r25, X
    1134:	14 97       	sbiw	r26, 0x04	; 4
    1136:	a5 01       	movw	r20, r10
    1138:	94 01       	movw	r18, r8
    113a:	0e 94 c6 09 	call	0x138c	; 0x138c <__divsf3>
    113e:	0e 94 38 0a 	call	0x1470	; 0x1470 <__fixunssfsi>
    1142:	06 17       	cp	r16, r22
    1144:	28 f3       	brcs	.-54     	; 0x1110 <PWM_DrawSignal+0x240>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
		}
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
    1146:	22 e0       	ldi	r18, 0x02	; 2
    1148:	32 e0       	ldi	r19, 0x02	; 2
    114a:	4e e7       	ldi	r20, 0x7E	; 126
    114c:	50 e4       	ldi	r21, 0x40	; 64
    114e:	60 e4       	ldi	r22, 0x40	; 64
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
    115a:	1b 5f       	subi	r17, 0xFB	; 251
		for (i = 0; i < ((u8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    115c:	00 e0       	ldi	r16, 0x00	; 0
    115e:	0c c0       	rjmp	.+24     	; 0x1178 <PWM_DrawSignal+0x2a8>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LOW_LINE); pixel_width_count += 5;
    1160:	20 e4       	ldi	r18, 0x40	; 64
    1162:	30 e4       	ldi	r19, 0x40	; 64
    1164:	40 e4       	ldi	r20, 0x40	; 64
    1166:	50 e4       	ldi	r21, 0x40	; 64
    1168:	60 e4       	ldi	r22, 0x40	; 64
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 98 02 	call	0x530	; 0x530 <GLCD_DisplaySpecialPattern>
    1174:	1b 5f       	subi	r17, 0xFB	; 251
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((u8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
		}
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((u8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    1176:	0f 5f       	subi	r16, 0xFF	; 255
    1178:	f7 01       	movw	r30, r14
    117a:	65 81       	ldd	r22, Z+5	; 0x05
    117c:	76 81       	ldd	r23, Z+6	; 0x06
    117e:	87 81       	ldd	r24, Z+7	; 0x07
    1180:	90 85       	ldd	r25, Z+8	; 0x08
    1182:	a5 01       	movw	r20, r10
    1184:	94 01       	movw	r18, r8
    1186:	0e 94 c6 09 	call	0x138c	; 0x138c <__divsf3>
    118a:	0e 94 38 0a 	call	0x1470	; 0x1470 <__fixunssfsi>
    118e:	06 17       	cp	r16, r22
    1190:	38 f3       	brcs	.-50     	; 0x1160 <PWM_DrawSignal+0x290>
	/* Display PWM  Signal from Line 6 */
	
	GLCD_GoToLineP0(6);
	u8 pixel_width_count = 0;
	u8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
    1192:	18 37       	cpi	r17, 0x78	; 120
    1194:	08 f4       	brcc	.+2      	; 0x1198 <PWM_DrawSignal+0x2c8>
    1196:	af cf       	rjmp	.-162    	; 0x10f6 <PWM_DrawSignal+0x226>
		}
	}
	


}
    1198:	ec 96       	adiw	r28, 0x3c	; 60
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	ff 90       	pop	r15
    11ae:	ef 90       	pop	r14
    11b0:	bf 90       	pop	r11
    11b2:	af 90       	pop	r10
    11b4:	9f 90       	pop	r9
    11b6:	8f 90       	pop	r8
    11b8:	08 95       	ret

000011ba <PWM_Init>:
    11ba:	dc 01       	movw	r26, r24
    11bc:	87 b3       	in	r24, 0x17	; 23
    11be:	88 60       	ori	r24, 0x08	; 8
    11c0:	87 bb       	out	0x17, r24	; 23
    11c2:	13 be       	out	0x33, r1	; 51
    11c4:	23 b7       	in	r18, 0x33	; 51
    11c6:	11 96       	adiw	r26, 0x01	; 1
    11c8:	9c 91       	ld	r25, X
    11ca:	11 97       	sbiw	r26, 0x01	; 1
    11cc:	99 0f       	add	r25, r25
    11ce:	99 0f       	add	r25, r25
    11d0:	99 0f       	add	r25, r25
    11d2:	92 2b       	or	r25, r18
    11d4:	90 64       	ori	r25, 0x40	; 64
    11d6:	93 bf       	out	0x33, r25	; 51
    11d8:	23 b7       	in	r18, 0x33	; 51
    11da:	13 96       	adiw	r26, 0x03	; 3
    11dc:	9c 91       	ld	r25, X
    11de:	13 97       	sbiw	r26, 0x03	; 3
    11e0:	92 95       	swap	r25
    11e2:	90 7f       	andi	r25, 0xF0	; 240
    11e4:	92 2b       	or	r25, r18
    11e6:	90 62       	ori	r25, 0x20	; 32
    11e8:	93 bf       	out	0x33, r25	; 51
    11ea:	12 96       	adiw	r26, 0x02	; 2
    11ec:	8c 91       	ld	r24, X
    11ee:	12 97       	sbiw	r26, 0x02	; 2
    11f0:	48 2f       	mov	r20, r24
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	48 30       	cpi	r20, 0x08	; 8
    11f6:	51 05       	cpc	r21, r1
    11f8:	e8 f4       	brcc	.+58     	; 0x1234 <PWM_Init+0x7a>
    11fa:	fa 01       	movw	r30, r20
    11fc:	eb 57       	subi	r30, 0x7B	; 123
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__tablejump2__>
    1204:	93 b7       	in	r25, 0x33	; 51
    1206:	89 2b       	or	r24, r25
    1208:	83 bf       	out	0x33, r24	; 51
    120a:	14 c0       	rjmp	.+40     	; 0x1234 <PWM_Init+0x7a>
    120c:	93 b7       	in	r25, 0x33	; 51
    120e:	89 2b       	or	r24, r25
    1210:	83 bf       	out	0x33, r24	; 51
    1212:	10 c0       	rjmp	.+32     	; 0x1234 <PWM_Init+0x7a>
    1214:	93 b7       	in	r25, 0x33	; 51
    1216:	89 2b       	or	r24, r25
    1218:	83 bf       	out	0x33, r24	; 51
    121a:	0c c0       	rjmp	.+24     	; 0x1234 <PWM_Init+0x7a>
    121c:	93 b7       	in	r25, 0x33	; 51
    121e:	89 2b       	or	r24, r25
    1220:	83 bf       	out	0x33, r24	; 51
    1222:	08 c0       	rjmp	.+16     	; 0x1234 <PWM_Init+0x7a>
    1224:	93 b7       	in	r25, 0x33	; 51
    1226:	89 2b       	or	r24, r25
    1228:	83 bf       	out	0x33, r24	; 51
    122a:	04 c0       	rjmp	.+8      	; 0x1234 <PWM_Init+0x7a>
    122c:	93 b7       	in	r25, 0x33	; 51
    122e:	82 50       	subi	r24, 0x02	; 2
    1230:	89 2b       	or	r24, r25
    1232:	83 bf       	out	0x33, r24	; 51
    1234:	1c be       	out	0x3c, r1	; 60
    1236:	13 96       	adiw	r26, 0x03	; 3
    1238:	8c 91       	ld	r24, X
    123a:	13 97       	sbiw	r26, 0x03	; 3
    123c:	88 23       	and	r24, r24
    123e:	19 f0       	breq	.+6      	; 0x1246 <PWM_Init+0x8c>
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	b9 f0       	breq	.+46     	; 0x1272 <PWM_Init+0xb8>
    1244:	34 c0       	rjmp	.+104    	; 0x12ae <PWM_Init+0xf4>
    1246:	16 96       	adiw	r26, 0x06	; 6
    1248:	6c 91       	ld	r22, X
    124a:	8f ef       	ldi	r24, 0xFF	; 255
    124c:	68 9f       	mul	r22, r24
    124e:	b0 01       	movw	r22, r0
    1250:	11 24       	eor	r1, r1
    1252:	07 2e       	mov	r0, r23
    1254:	00 0c       	add	r0, r0
    1256:	88 0b       	sbc	r24, r24
    1258:	99 0b       	sbc	r25, r25
    125a:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__floatsisf>
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	48 ec       	ldi	r20, 0xC8	; 200
    1264:	52 e4       	ldi	r21, 0x42	; 66
    1266:	0e 94 c6 09 	call	0x138c	; 0x138c <__divsf3>
    126a:	0e 94 38 0a 	call	0x1470	; 0x1470 <__fixunssfsi>
    126e:	6c bf       	out	0x3c, r22	; 60
    1270:	1e c0       	rjmp	.+60     	; 0x12ae <PWM_Init+0xf4>
    1272:	16 96       	adiw	r26, 0x06	; 6
    1274:	6c 91       	ld	r22, X
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__floatsisf>
    1280:	9b 01       	movw	r18, r22
    1282:	ac 01       	movw	r20, r24
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	88 ec       	ldi	r24, 0xC8	; 200
    128a:	92 e4       	ldi	r25, 0x42	; 66
    128c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__subsf3>
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	4f e7       	ldi	r20, 0x7F	; 127
    1296:	53 e4       	ldi	r21, 0x43	; 67
    1298:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__mulsf3>
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	48 ec       	ldi	r20, 0xC8	; 200
    12a2:	52 e4       	ldi	r21, 0x42	; 66
    12a4:	0e 94 c6 09 	call	0x138c	; 0x138c <__divsf3>
    12a8:	0e 94 38 0a 	call	0x1470	; 0x1470 <__fixunssfsi>
    12ac:	6c bf       	out	0x3c, r22	; 60
    12ae:	12 be       	out	0x32, r1	; 50
    12b0:	08 95       	ret

000012b2 <__subsf3>:
    12b2:	50 58       	subi	r21, 0x80	; 128

000012b4 <__addsf3>:
    12b4:	bb 27       	eor	r27, r27
    12b6:	aa 27       	eor	r26, r26
    12b8:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__addsf3x>
    12bc:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__fp_round>
    12c0:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fp_pscA>
    12c4:	38 f0       	brcs	.+14     	; 0x12d4 <__addsf3+0x20>
    12c6:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__fp_pscB>
    12ca:	20 f0       	brcs	.+8      	; 0x12d4 <__addsf3+0x20>
    12cc:	39 f4       	brne	.+14     	; 0x12dc <__addsf3+0x28>
    12ce:	9f 3f       	cpi	r25, 0xFF	; 255
    12d0:	19 f4       	brne	.+6      	; 0x12d8 <__addsf3+0x24>
    12d2:	26 f4       	brtc	.+8      	; 0x12dc <__addsf3+0x28>
    12d4:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__fp_nan>
    12d8:	0e f4       	brtc	.+2      	; 0x12dc <__addsf3+0x28>
    12da:	e0 95       	com	r30
    12dc:	e7 fb       	bst	r30, 7
    12de:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__fp_inf>

000012e2 <__addsf3x>:
    12e2:	e9 2f       	mov	r30, r25
    12e4:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__fp_split3>
    12e8:	58 f3       	brcs	.-42     	; 0x12c0 <__addsf3+0xc>
    12ea:	ba 17       	cp	r27, r26
    12ec:	62 07       	cpc	r22, r18
    12ee:	73 07       	cpc	r23, r19
    12f0:	84 07       	cpc	r24, r20
    12f2:	95 07       	cpc	r25, r21
    12f4:	20 f0       	brcs	.+8      	; 0x12fe <__addsf3x+0x1c>
    12f6:	79 f4       	brne	.+30     	; 0x1316 <__addsf3x+0x34>
    12f8:	a6 f5       	brtc	.+104    	; 0x1362 <__addsf3x+0x80>
    12fa:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__fp_zero>
    12fe:	0e f4       	brtc	.+2      	; 0x1302 <__addsf3x+0x20>
    1300:	e0 95       	com	r30
    1302:	0b 2e       	mov	r0, r27
    1304:	ba 2f       	mov	r27, r26
    1306:	a0 2d       	mov	r26, r0
    1308:	0b 01       	movw	r0, r22
    130a:	b9 01       	movw	r22, r18
    130c:	90 01       	movw	r18, r0
    130e:	0c 01       	movw	r0, r24
    1310:	ca 01       	movw	r24, r20
    1312:	a0 01       	movw	r20, r0
    1314:	11 24       	eor	r1, r1
    1316:	ff 27       	eor	r31, r31
    1318:	59 1b       	sub	r21, r25
    131a:	99 f0       	breq	.+38     	; 0x1342 <__addsf3x+0x60>
    131c:	59 3f       	cpi	r21, 0xF9	; 249
    131e:	50 f4       	brcc	.+20     	; 0x1334 <__addsf3x+0x52>
    1320:	50 3e       	cpi	r21, 0xE0	; 224
    1322:	68 f1       	brcs	.+90     	; 0x137e <__addsf3x+0x9c>
    1324:	1a 16       	cp	r1, r26
    1326:	f0 40       	sbci	r31, 0x00	; 0
    1328:	a2 2f       	mov	r26, r18
    132a:	23 2f       	mov	r18, r19
    132c:	34 2f       	mov	r19, r20
    132e:	44 27       	eor	r20, r20
    1330:	58 5f       	subi	r21, 0xF8	; 248
    1332:	f3 cf       	rjmp	.-26     	; 0x131a <__addsf3x+0x38>
    1334:	46 95       	lsr	r20
    1336:	37 95       	ror	r19
    1338:	27 95       	ror	r18
    133a:	a7 95       	ror	r26
    133c:	f0 40       	sbci	r31, 0x00	; 0
    133e:	53 95       	inc	r21
    1340:	c9 f7       	brne	.-14     	; 0x1334 <__addsf3x+0x52>
    1342:	7e f4       	brtc	.+30     	; 0x1362 <__addsf3x+0x80>
    1344:	1f 16       	cp	r1, r31
    1346:	ba 0b       	sbc	r27, r26
    1348:	62 0b       	sbc	r22, r18
    134a:	73 0b       	sbc	r23, r19
    134c:	84 0b       	sbc	r24, r20
    134e:	ba f0       	brmi	.+46     	; 0x137e <__addsf3x+0x9c>
    1350:	91 50       	subi	r25, 0x01	; 1
    1352:	a1 f0       	breq	.+40     	; 0x137c <__addsf3x+0x9a>
    1354:	ff 0f       	add	r31, r31
    1356:	bb 1f       	adc	r27, r27
    1358:	66 1f       	adc	r22, r22
    135a:	77 1f       	adc	r23, r23
    135c:	88 1f       	adc	r24, r24
    135e:	c2 f7       	brpl	.-16     	; 0x1350 <__addsf3x+0x6e>
    1360:	0e c0       	rjmp	.+28     	; 0x137e <__addsf3x+0x9c>
    1362:	ba 0f       	add	r27, r26
    1364:	62 1f       	adc	r22, r18
    1366:	73 1f       	adc	r23, r19
    1368:	84 1f       	adc	r24, r20
    136a:	48 f4       	brcc	.+18     	; 0x137e <__addsf3x+0x9c>
    136c:	87 95       	ror	r24
    136e:	77 95       	ror	r23
    1370:	67 95       	ror	r22
    1372:	b7 95       	ror	r27
    1374:	f7 95       	ror	r31
    1376:	9e 3f       	cpi	r25, 0xFE	; 254
    1378:	08 f0       	brcs	.+2      	; 0x137c <__addsf3x+0x9a>
    137a:	b0 cf       	rjmp	.-160    	; 0x12dc <__addsf3+0x28>
    137c:	93 95       	inc	r25
    137e:	88 0f       	add	r24, r24
    1380:	08 f0       	brcs	.+2      	; 0x1384 <__addsf3x+0xa2>
    1382:	99 27       	eor	r25, r25
    1384:	ee 0f       	add	r30, r30
    1386:	97 95       	ror	r25
    1388:	87 95       	ror	r24
    138a:	08 95       	ret

0000138c <__divsf3>:
    138c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__divsf3x>
    1390:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__fp_round>
    1394:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__fp_pscB>
    1398:	58 f0       	brcs	.+22     	; 0x13b0 <__divsf3+0x24>
    139a:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fp_pscA>
    139e:	40 f0       	brcs	.+16     	; 0x13b0 <__divsf3+0x24>
    13a0:	29 f4       	brne	.+10     	; 0x13ac <__divsf3+0x20>
    13a2:	5f 3f       	cpi	r21, 0xFF	; 255
    13a4:	29 f0       	breq	.+10     	; 0x13b0 <__divsf3+0x24>
    13a6:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__fp_inf>
    13aa:	51 11       	cpse	r21, r1
    13ac:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_szero>
    13b0:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__fp_nan>

000013b4 <__divsf3x>:
    13b4:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__fp_split3>
    13b8:	68 f3       	brcs	.-38     	; 0x1394 <__divsf3+0x8>

000013ba <__divsf3_pse>:
    13ba:	99 23       	and	r25, r25
    13bc:	b1 f3       	breq	.-20     	; 0x13aa <__divsf3+0x1e>
    13be:	55 23       	and	r21, r21
    13c0:	91 f3       	breq	.-28     	; 0x13a6 <__divsf3+0x1a>
    13c2:	95 1b       	sub	r25, r21
    13c4:	55 0b       	sbc	r21, r21
    13c6:	bb 27       	eor	r27, r27
    13c8:	aa 27       	eor	r26, r26
    13ca:	62 17       	cp	r22, r18
    13cc:	73 07       	cpc	r23, r19
    13ce:	84 07       	cpc	r24, r20
    13d0:	38 f0       	brcs	.+14     	; 0x13e0 <__divsf3_pse+0x26>
    13d2:	9f 5f       	subi	r25, 0xFF	; 255
    13d4:	5f 4f       	sbci	r21, 0xFF	; 255
    13d6:	22 0f       	add	r18, r18
    13d8:	33 1f       	adc	r19, r19
    13da:	44 1f       	adc	r20, r20
    13dc:	aa 1f       	adc	r26, r26
    13de:	a9 f3       	breq	.-22     	; 0x13ca <__divsf3_pse+0x10>
    13e0:	35 d0       	rcall	.+106    	; 0x144c <__divsf3_pse+0x92>
    13e2:	0e 2e       	mov	r0, r30
    13e4:	3a f0       	brmi	.+14     	; 0x13f4 <__divsf3_pse+0x3a>
    13e6:	e0 e8       	ldi	r30, 0x80	; 128
    13e8:	32 d0       	rcall	.+100    	; 0x144e <__divsf3_pse+0x94>
    13ea:	91 50       	subi	r25, 0x01	; 1
    13ec:	50 40       	sbci	r21, 0x00	; 0
    13ee:	e6 95       	lsr	r30
    13f0:	00 1c       	adc	r0, r0
    13f2:	ca f7       	brpl	.-14     	; 0x13e6 <__divsf3_pse+0x2c>
    13f4:	2b d0       	rcall	.+86     	; 0x144c <__divsf3_pse+0x92>
    13f6:	fe 2f       	mov	r31, r30
    13f8:	29 d0       	rcall	.+82     	; 0x144c <__divsf3_pse+0x92>
    13fa:	66 0f       	add	r22, r22
    13fc:	77 1f       	adc	r23, r23
    13fe:	88 1f       	adc	r24, r24
    1400:	bb 1f       	adc	r27, r27
    1402:	26 17       	cp	r18, r22
    1404:	37 07       	cpc	r19, r23
    1406:	48 07       	cpc	r20, r24
    1408:	ab 07       	cpc	r26, r27
    140a:	b0 e8       	ldi	r27, 0x80	; 128
    140c:	09 f0       	breq	.+2      	; 0x1410 <__divsf3_pse+0x56>
    140e:	bb 0b       	sbc	r27, r27
    1410:	80 2d       	mov	r24, r0
    1412:	bf 01       	movw	r22, r30
    1414:	ff 27       	eor	r31, r31
    1416:	93 58       	subi	r25, 0x83	; 131
    1418:	5f 4f       	sbci	r21, 0xFF	; 255
    141a:	3a f0       	brmi	.+14     	; 0x142a <__divsf3_pse+0x70>
    141c:	9e 3f       	cpi	r25, 0xFE	; 254
    141e:	51 05       	cpc	r21, r1
    1420:	78 f0       	brcs	.+30     	; 0x1440 <__divsf3_pse+0x86>
    1422:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__fp_inf>
    1426:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_szero>
    142a:	5f 3f       	cpi	r21, 0xFF	; 255
    142c:	e4 f3       	brlt	.-8      	; 0x1426 <__divsf3_pse+0x6c>
    142e:	98 3e       	cpi	r25, 0xE8	; 232
    1430:	d4 f3       	brlt	.-12     	; 0x1426 <__divsf3_pse+0x6c>
    1432:	86 95       	lsr	r24
    1434:	77 95       	ror	r23
    1436:	67 95       	ror	r22
    1438:	b7 95       	ror	r27
    143a:	f7 95       	ror	r31
    143c:	9f 5f       	subi	r25, 0xFF	; 255
    143e:	c9 f7       	brne	.-14     	; 0x1432 <__divsf3_pse+0x78>
    1440:	88 0f       	add	r24, r24
    1442:	91 1d       	adc	r25, r1
    1444:	96 95       	lsr	r25
    1446:	87 95       	ror	r24
    1448:	97 f9       	bld	r25, 7
    144a:	08 95       	ret
    144c:	e1 e0       	ldi	r30, 0x01	; 1
    144e:	66 0f       	add	r22, r22
    1450:	77 1f       	adc	r23, r23
    1452:	88 1f       	adc	r24, r24
    1454:	bb 1f       	adc	r27, r27
    1456:	62 17       	cp	r22, r18
    1458:	73 07       	cpc	r23, r19
    145a:	84 07       	cpc	r24, r20
    145c:	ba 07       	cpc	r27, r26
    145e:	20 f0       	brcs	.+8      	; 0x1468 <__divsf3_pse+0xae>
    1460:	62 1b       	sub	r22, r18
    1462:	73 0b       	sbc	r23, r19
    1464:	84 0b       	sbc	r24, r20
    1466:	ba 0b       	sbc	r27, r26
    1468:	ee 1f       	adc	r30, r30
    146a:	88 f7       	brcc	.-30     	; 0x144e <__divsf3_pse+0x94>
    146c:	e0 95       	com	r30
    146e:	08 95       	ret

00001470 <__fixunssfsi>:
    1470:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__fp_splitA>
    1474:	88 f0       	brcs	.+34     	; 0x1498 <__fixunssfsi+0x28>
    1476:	9f 57       	subi	r25, 0x7F	; 127
    1478:	98 f0       	brcs	.+38     	; 0x14a0 <__fixunssfsi+0x30>
    147a:	b9 2f       	mov	r27, r25
    147c:	99 27       	eor	r25, r25
    147e:	b7 51       	subi	r27, 0x17	; 23
    1480:	b0 f0       	brcs	.+44     	; 0x14ae <__fixunssfsi+0x3e>
    1482:	e1 f0       	breq	.+56     	; 0x14bc <__fixunssfsi+0x4c>
    1484:	66 0f       	add	r22, r22
    1486:	77 1f       	adc	r23, r23
    1488:	88 1f       	adc	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	1a f0       	brmi	.+6      	; 0x1494 <__fixunssfsi+0x24>
    148e:	ba 95       	dec	r27
    1490:	c9 f7       	brne	.-14     	; 0x1484 <__fixunssfsi+0x14>
    1492:	14 c0       	rjmp	.+40     	; 0x14bc <__fixunssfsi+0x4c>
    1494:	b1 30       	cpi	r27, 0x01	; 1
    1496:	91 f0       	breq	.+36     	; 0x14bc <__fixunssfsi+0x4c>
    1498:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__fp_zero>
    149c:	b1 e0       	ldi	r27, 0x01	; 1
    149e:	08 95       	ret
    14a0:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__fp_zero>
    14a4:	67 2f       	mov	r22, r23
    14a6:	78 2f       	mov	r23, r24
    14a8:	88 27       	eor	r24, r24
    14aa:	b8 5f       	subi	r27, 0xF8	; 248
    14ac:	39 f0       	breq	.+14     	; 0x14bc <__fixunssfsi+0x4c>
    14ae:	b9 3f       	cpi	r27, 0xF9	; 249
    14b0:	cc f3       	brlt	.-14     	; 0x14a4 <__fixunssfsi+0x34>
    14b2:	86 95       	lsr	r24
    14b4:	77 95       	ror	r23
    14b6:	67 95       	ror	r22
    14b8:	b3 95       	inc	r27
    14ba:	d9 f7       	brne	.-10     	; 0x14b2 <__fixunssfsi+0x42>
    14bc:	3e f4       	brtc	.+14     	; 0x14cc <__fixunssfsi+0x5c>
    14be:	90 95       	com	r25
    14c0:	80 95       	com	r24
    14c2:	70 95       	com	r23
    14c4:	61 95       	neg	r22
    14c6:	7f 4f       	sbci	r23, 0xFF	; 255
    14c8:	8f 4f       	sbci	r24, 0xFF	; 255
    14ca:	9f 4f       	sbci	r25, 0xFF	; 255
    14cc:	08 95       	ret

000014ce <__floatunsisf>:
    14ce:	e8 94       	clt
    14d0:	09 c0       	rjmp	.+18     	; 0x14e4 <__floatsisf+0x12>

000014d2 <__floatsisf>:
    14d2:	97 fb       	bst	r25, 7
    14d4:	3e f4       	brtc	.+14     	; 0x14e4 <__floatsisf+0x12>
    14d6:	90 95       	com	r25
    14d8:	80 95       	com	r24
    14da:	70 95       	com	r23
    14dc:	61 95       	neg	r22
    14de:	7f 4f       	sbci	r23, 0xFF	; 255
    14e0:	8f 4f       	sbci	r24, 0xFF	; 255
    14e2:	9f 4f       	sbci	r25, 0xFF	; 255
    14e4:	99 23       	and	r25, r25
    14e6:	a9 f0       	breq	.+42     	; 0x1512 <__floatsisf+0x40>
    14e8:	f9 2f       	mov	r31, r25
    14ea:	96 e9       	ldi	r25, 0x96	; 150
    14ec:	bb 27       	eor	r27, r27
    14ee:	93 95       	inc	r25
    14f0:	f6 95       	lsr	r31
    14f2:	87 95       	ror	r24
    14f4:	77 95       	ror	r23
    14f6:	67 95       	ror	r22
    14f8:	b7 95       	ror	r27
    14fa:	f1 11       	cpse	r31, r1
    14fc:	f8 cf       	rjmp	.-16     	; 0x14ee <__floatsisf+0x1c>
    14fe:	fa f4       	brpl	.+62     	; 0x153e <__floatsisf+0x6c>
    1500:	bb 0f       	add	r27, r27
    1502:	11 f4       	brne	.+4      	; 0x1508 <__floatsisf+0x36>
    1504:	60 ff       	sbrs	r22, 0
    1506:	1b c0       	rjmp	.+54     	; 0x153e <__floatsisf+0x6c>
    1508:	6f 5f       	subi	r22, 0xFF	; 255
    150a:	7f 4f       	sbci	r23, 0xFF	; 255
    150c:	8f 4f       	sbci	r24, 0xFF	; 255
    150e:	9f 4f       	sbci	r25, 0xFF	; 255
    1510:	16 c0       	rjmp	.+44     	; 0x153e <__floatsisf+0x6c>
    1512:	88 23       	and	r24, r24
    1514:	11 f0       	breq	.+4      	; 0x151a <__floatsisf+0x48>
    1516:	96 e9       	ldi	r25, 0x96	; 150
    1518:	11 c0       	rjmp	.+34     	; 0x153c <__floatsisf+0x6a>
    151a:	77 23       	and	r23, r23
    151c:	21 f0       	breq	.+8      	; 0x1526 <__floatsisf+0x54>
    151e:	9e e8       	ldi	r25, 0x8E	; 142
    1520:	87 2f       	mov	r24, r23
    1522:	76 2f       	mov	r23, r22
    1524:	05 c0       	rjmp	.+10     	; 0x1530 <__floatsisf+0x5e>
    1526:	66 23       	and	r22, r22
    1528:	71 f0       	breq	.+28     	; 0x1546 <__floatsisf+0x74>
    152a:	96 e8       	ldi	r25, 0x86	; 134
    152c:	86 2f       	mov	r24, r22
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	2a f0       	brmi	.+10     	; 0x153e <__floatsisf+0x6c>
    1534:	9a 95       	dec	r25
    1536:	66 0f       	add	r22, r22
    1538:	77 1f       	adc	r23, r23
    153a:	88 1f       	adc	r24, r24
    153c:	da f7       	brpl	.-10     	; 0x1534 <__floatsisf+0x62>
    153e:	88 0f       	add	r24, r24
    1540:	96 95       	lsr	r25
    1542:	87 95       	ror	r24
    1544:	97 f9       	bld	r25, 7
    1546:	08 95       	ret

00001548 <__fp_inf>:
    1548:	97 f9       	bld	r25, 7
    154a:	9f 67       	ori	r25, 0x7F	; 127
    154c:	80 e8       	ldi	r24, 0x80	; 128
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	08 95       	ret

00001554 <__fp_nan>:
    1554:	9f ef       	ldi	r25, 0xFF	; 255
    1556:	80 ec       	ldi	r24, 0xC0	; 192
    1558:	08 95       	ret

0000155a <__fp_pscA>:
    155a:	00 24       	eor	r0, r0
    155c:	0a 94       	dec	r0
    155e:	16 16       	cp	r1, r22
    1560:	17 06       	cpc	r1, r23
    1562:	18 06       	cpc	r1, r24
    1564:	09 06       	cpc	r0, r25
    1566:	08 95       	ret

00001568 <__fp_pscB>:
    1568:	00 24       	eor	r0, r0
    156a:	0a 94       	dec	r0
    156c:	12 16       	cp	r1, r18
    156e:	13 06       	cpc	r1, r19
    1570:	14 06       	cpc	r1, r20
    1572:	05 06       	cpc	r0, r21
    1574:	08 95       	ret

00001576 <__fp_round>:
    1576:	09 2e       	mov	r0, r25
    1578:	03 94       	inc	r0
    157a:	00 0c       	add	r0, r0
    157c:	11 f4       	brne	.+4      	; 0x1582 <__fp_round+0xc>
    157e:	88 23       	and	r24, r24
    1580:	52 f0       	brmi	.+20     	; 0x1596 <__fp_round+0x20>
    1582:	bb 0f       	add	r27, r27
    1584:	40 f4       	brcc	.+16     	; 0x1596 <__fp_round+0x20>
    1586:	bf 2b       	or	r27, r31
    1588:	11 f4       	brne	.+4      	; 0x158e <__fp_round+0x18>
    158a:	60 ff       	sbrs	r22, 0
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <__fp_round+0x20>
    158e:	6f 5f       	subi	r22, 0xFF	; 255
    1590:	7f 4f       	sbci	r23, 0xFF	; 255
    1592:	8f 4f       	sbci	r24, 0xFF	; 255
    1594:	9f 4f       	sbci	r25, 0xFF	; 255
    1596:	08 95       	ret

00001598 <__fp_split3>:
    1598:	57 fd       	sbrc	r21, 7
    159a:	90 58       	subi	r25, 0x80	; 128
    159c:	44 0f       	add	r20, r20
    159e:	55 1f       	adc	r21, r21
    15a0:	59 f0       	breq	.+22     	; 0x15b8 <__fp_splitA+0x10>
    15a2:	5f 3f       	cpi	r21, 0xFF	; 255
    15a4:	71 f0       	breq	.+28     	; 0x15c2 <__fp_splitA+0x1a>
    15a6:	47 95       	ror	r20

000015a8 <__fp_splitA>:
    15a8:	88 0f       	add	r24, r24
    15aa:	97 fb       	bst	r25, 7
    15ac:	99 1f       	adc	r25, r25
    15ae:	61 f0       	breq	.+24     	; 0x15c8 <__fp_splitA+0x20>
    15b0:	9f 3f       	cpi	r25, 0xFF	; 255
    15b2:	79 f0       	breq	.+30     	; 0x15d2 <__fp_splitA+0x2a>
    15b4:	87 95       	ror	r24
    15b6:	08 95       	ret
    15b8:	12 16       	cp	r1, r18
    15ba:	13 06       	cpc	r1, r19
    15bc:	14 06       	cpc	r1, r20
    15be:	55 1f       	adc	r21, r21
    15c0:	f2 cf       	rjmp	.-28     	; 0x15a6 <__fp_split3+0xe>
    15c2:	46 95       	lsr	r20
    15c4:	f1 df       	rcall	.-30     	; 0x15a8 <__fp_splitA>
    15c6:	08 c0       	rjmp	.+16     	; 0x15d8 <__fp_splitA+0x30>
    15c8:	16 16       	cp	r1, r22
    15ca:	17 06       	cpc	r1, r23
    15cc:	18 06       	cpc	r1, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	f1 cf       	rjmp	.-30     	; 0x15b4 <__fp_splitA+0xc>
    15d2:	86 95       	lsr	r24
    15d4:	71 05       	cpc	r23, r1
    15d6:	61 05       	cpc	r22, r1
    15d8:	08 94       	sec
    15da:	08 95       	ret

000015dc <__fp_zero>:
    15dc:	e8 94       	clt

000015de <__fp_szero>:
    15de:	bb 27       	eor	r27, r27
    15e0:	66 27       	eor	r22, r22
    15e2:	77 27       	eor	r23, r23
    15e4:	cb 01       	movw	r24, r22
    15e6:	97 f9       	bld	r25, 7
    15e8:	08 95       	ret

000015ea <__mulsf3>:
    15ea:	0e 94 08 0b 	call	0x1610	; 0x1610 <__mulsf3x>
    15ee:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__fp_round>
    15f2:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fp_pscA>
    15f6:	38 f0       	brcs	.+14     	; 0x1606 <__mulsf3+0x1c>
    15f8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__fp_pscB>
    15fc:	20 f0       	brcs	.+8      	; 0x1606 <__mulsf3+0x1c>
    15fe:	95 23       	and	r25, r21
    1600:	11 f0       	breq	.+4      	; 0x1606 <__mulsf3+0x1c>
    1602:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__fp_inf>
    1606:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__fp_nan>
    160a:	11 24       	eor	r1, r1
    160c:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_szero>

00001610 <__mulsf3x>:
    1610:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__fp_split3>
    1614:	70 f3       	brcs	.-36     	; 0x15f2 <__mulsf3+0x8>

00001616 <__mulsf3_pse>:
    1616:	95 9f       	mul	r25, r21
    1618:	c1 f3       	breq	.-16     	; 0x160a <__mulsf3+0x20>
    161a:	95 0f       	add	r25, r21
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	55 1f       	adc	r21, r21
    1620:	62 9f       	mul	r22, r18
    1622:	f0 01       	movw	r30, r0
    1624:	72 9f       	mul	r23, r18
    1626:	bb 27       	eor	r27, r27
    1628:	f0 0d       	add	r31, r0
    162a:	b1 1d       	adc	r27, r1
    162c:	63 9f       	mul	r22, r19
    162e:	aa 27       	eor	r26, r26
    1630:	f0 0d       	add	r31, r0
    1632:	b1 1d       	adc	r27, r1
    1634:	aa 1f       	adc	r26, r26
    1636:	64 9f       	mul	r22, r20
    1638:	66 27       	eor	r22, r22
    163a:	b0 0d       	add	r27, r0
    163c:	a1 1d       	adc	r26, r1
    163e:	66 1f       	adc	r22, r22
    1640:	82 9f       	mul	r24, r18
    1642:	22 27       	eor	r18, r18
    1644:	b0 0d       	add	r27, r0
    1646:	a1 1d       	adc	r26, r1
    1648:	62 1f       	adc	r22, r18
    164a:	73 9f       	mul	r23, r19
    164c:	b0 0d       	add	r27, r0
    164e:	a1 1d       	adc	r26, r1
    1650:	62 1f       	adc	r22, r18
    1652:	83 9f       	mul	r24, r19
    1654:	a0 0d       	add	r26, r0
    1656:	61 1d       	adc	r22, r1
    1658:	22 1f       	adc	r18, r18
    165a:	74 9f       	mul	r23, r20
    165c:	33 27       	eor	r19, r19
    165e:	a0 0d       	add	r26, r0
    1660:	61 1d       	adc	r22, r1
    1662:	23 1f       	adc	r18, r19
    1664:	84 9f       	mul	r24, r20
    1666:	60 0d       	add	r22, r0
    1668:	21 1d       	adc	r18, r1
    166a:	82 2f       	mov	r24, r18
    166c:	76 2f       	mov	r23, r22
    166e:	6a 2f       	mov	r22, r26
    1670:	11 24       	eor	r1, r1
    1672:	9f 57       	subi	r25, 0x7F	; 127
    1674:	50 40       	sbci	r21, 0x00	; 0
    1676:	9a f0       	brmi	.+38     	; 0x169e <__mulsf3_pse+0x88>
    1678:	f1 f0       	breq	.+60     	; 0x16b6 <__mulsf3_pse+0xa0>
    167a:	88 23       	and	r24, r24
    167c:	4a f0       	brmi	.+18     	; 0x1690 <__mulsf3_pse+0x7a>
    167e:	ee 0f       	add	r30, r30
    1680:	ff 1f       	adc	r31, r31
    1682:	bb 1f       	adc	r27, r27
    1684:	66 1f       	adc	r22, r22
    1686:	77 1f       	adc	r23, r23
    1688:	88 1f       	adc	r24, r24
    168a:	91 50       	subi	r25, 0x01	; 1
    168c:	50 40       	sbci	r21, 0x00	; 0
    168e:	a9 f7       	brne	.-22     	; 0x167a <__mulsf3_pse+0x64>
    1690:	9e 3f       	cpi	r25, 0xFE	; 254
    1692:	51 05       	cpc	r21, r1
    1694:	80 f0       	brcs	.+32     	; 0x16b6 <__mulsf3_pse+0xa0>
    1696:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__fp_inf>
    169a:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_szero>
    169e:	5f 3f       	cpi	r21, 0xFF	; 255
    16a0:	e4 f3       	brlt	.-8      	; 0x169a <__mulsf3_pse+0x84>
    16a2:	98 3e       	cpi	r25, 0xE8	; 232
    16a4:	d4 f3       	brlt	.-12     	; 0x169a <__mulsf3_pse+0x84>
    16a6:	86 95       	lsr	r24
    16a8:	77 95       	ror	r23
    16aa:	67 95       	ror	r22
    16ac:	b7 95       	ror	r27
    16ae:	f7 95       	ror	r31
    16b0:	e7 95       	ror	r30
    16b2:	9f 5f       	subi	r25, 0xFF	; 255
    16b4:	c1 f7       	brne	.-16     	; 0x16a6 <__mulsf3_pse+0x90>
    16b6:	fe 2b       	or	r31, r30
    16b8:	88 0f       	add	r24, r24
    16ba:	91 1d       	adc	r25, r1
    16bc:	96 95       	lsr	r25
    16be:	87 95       	ror	r24
    16c0:	97 f9       	bld	r25, 7
    16c2:	08 95       	ret

000016c4 <__mulsi3>:
    16c4:	db 01       	movw	r26, r22
    16c6:	8f 93       	push	r24
    16c8:	9f 93       	push	r25
    16ca:	0e 94 97 0b 	call	0x172e	; 0x172e <__muluhisi3>
    16ce:	bf 91       	pop	r27
    16d0:	af 91       	pop	r26
    16d2:	a2 9f       	mul	r26, r18
    16d4:	80 0d       	add	r24, r0
    16d6:	91 1d       	adc	r25, r1
    16d8:	a3 9f       	mul	r26, r19
    16da:	90 0d       	add	r25, r0
    16dc:	b2 9f       	mul	r27, r18
    16de:	90 0d       	add	r25, r0
    16e0:	11 24       	eor	r1, r1
    16e2:	08 95       	ret

000016e4 <__divmodsi4>:
    16e4:	05 2e       	mov	r0, r21
    16e6:	97 fb       	bst	r25, 7
    16e8:	1e f4       	brtc	.+6      	; 0x16f0 <__divmodsi4+0xc>
    16ea:	00 94       	com	r0
    16ec:	0e 94 89 0b 	call	0x1712	; 0x1712 <__negsi2>
    16f0:	57 fd       	sbrc	r21, 7
    16f2:	07 d0       	rcall	.+14     	; 0x1702 <__divmodsi4_neg2>
    16f4:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__udivmodsi4>
    16f8:	07 fc       	sbrc	r0, 7
    16fa:	03 d0       	rcall	.+6      	; 0x1702 <__divmodsi4_neg2>
    16fc:	4e f4       	brtc	.+18     	; 0x1710 <__divmodsi4_exit>
    16fe:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__negsi2>

00001702 <__divmodsi4_neg2>:
    1702:	50 95       	com	r21
    1704:	40 95       	com	r20
    1706:	30 95       	com	r19
    1708:	21 95       	neg	r18
    170a:	3f 4f       	sbci	r19, 0xFF	; 255
    170c:	4f 4f       	sbci	r20, 0xFF	; 255
    170e:	5f 4f       	sbci	r21, 0xFF	; 255

00001710 <__divmodsi4_exit>:
    1710:	08 95       	ret

00001712 <__negsi2>:
    1712:	90 95       	com	r25
    1714:	80 95       	com	r24
    1716:	70 95       	com	r23
    1718:	61 95       	neg	r22
    171a:	7f 4f       	sbci	r23, 0xFF	; 255
    171c:	8f 4f       	sbci	r24, 0xFF	; 255
    171e:	9f 4f       	sbci	r25, 0xFF	; 255
    1720:	08 95       	ret

00001722 <__tablejump2__>:
    1722:	ee 0f       	add	r30, r30
    1724:	ff 1f       	adc	r31, r31
    1726:	05 90       	lpm	r0, Z+
    1728:	f4 91       	lpm	r31, Z
    172a:	e0 2d       	mov	r30, r0
    172c:	09 94       	ijmp

0000172e <__muluhisi3>:
    172e:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__umulhisi3>
    1732:	a5 9f       	mul	r26, r21
    1734:	90 0d       	add	r25, r0
    1736:	b4 9f       	mul	r27, r20
    1738:	90 0d       	add	r25, r0
    173a:	a4 9f       	mul	r26, r20
    173c:	80 0d       	add	r24, r0
    173e:	91 1d       	adc	r25, r1
    1740:	11 24       	eor	r1, r1
    1742:	08 95       	ret

00001744 <__ashrdi3>:
    1744:	97 fb       	bst	r25, 7
    1746:	10 f8       	bld	r1, 0

00001748 <__lshrdi3>:
    1748:	16 94       	lsr	r1
    174a:	00 08       	sbc	r0, r0
    174c:	0f 93       	push	r16
    174e:	08 30       	cpi	r16, 0x08	; 8
    1750:	98 f0       	brcs	.+38     	; 0x1778 <__lshrdi3+0x30>
    1752:	08 50       	subi	r16, 0x08	; 8
    1754:	23 2f       	mov	r18, r19
    1756:	34 2f       	mov	r19, r20
    1758:	45 2f       	mov	r20, r21
    175a:	56 2f       	mov	r21, r22
    175c:	67 2f       	mov	r22, r23
    175e:	78 2f       	mov	r23, r24
    1760:	89 2f       	mov	r24, r25
    1762:	90 2d       	mov	r25, r0
    1764:	f4 cf       	rjmp	.-24     	; 0x174e <__lshrdi3+0x6>
    1766:	05 94       	asr	r0
    1768:	97 95       	ror	r25
    176a:	87 95       	ror	r24
    176c:	77 95       	ror	r23
    176e:	67 95       	ror	r22
    1770:	57 95       	ror	r21
    1772:	47 95       	ror	r20
    1774:	37 95       	ror	r19
    1776:	27 95       	ror	r18
    1778:	0a 95       	dec	r16
    177a:	aa f7       	brpl	.-22     	; 0x1766 <__lshrdi3+0x1e>
    177c:	0f 91       	pop	r16
    177e:	08 95       	ret

00001780 <__udivmodsi4>:
    1780:	a1 e2       	ldi	r26, 0x21	; 33
    1782:	1a 2e       	mov	r1, r26
    1784:	aa 1b       	sub	r26, r26
    1786:	bb 1b       	sub	r27, r27
    1788:	fd 01       	movw	r30, r26
    178a:	0d c0       	rjmp	.+26     	; 0x17a6 <__udivmodsi4_ep>

0000178c <__udivmodsi4_loop>:
    178c:	aa 1f       	adc	r26, r26
    178e:	bb 1f       	adc	r27, r27
    1790:	ee 1f       	adc	r30, r30
    1792:	ff 1f       	adc	r31, r31
    1794:	a2 17       	cp	r26, r18
    1796:	b3 07       	cpc	r27, r19
    1798:	e4 07       	cpc	r30, r20
    179a:	f5 07       	cpc	r31, r21
    179c:	20 f0       	brcs	.+8      	; 0x17a6 <__udivmodsi4_ep>
    179e:	a2 1b       	sub	r26, r18
    17a0:	b3 0b       	sbc	r27, r19
    17a2:	e4 0b       	sbc	r30, r20
    17a4:	f5 0b       	sbc	r31, r21

000017a6 <__udivmodsi4_ep>:
    17a6:	66 1f       	adc	r22, r22
    17a8:	77 1f       	adc	r23, r23
    17aa:	88 1f       	adc	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	1a 94       	dec	r1
    17b0:	69 f7       	brne	.-38     	; 0x178c <__udivmodsi4_loop>
    17b2:	60 95       	com	r22
    17b4:	70 95       	com	r23
    17b6:	80 95       	com	r24
    17b8:	90 95       	com	r25
    17ba:	9b 01       	movw	r18, r22
    17bc:	ac 01       	movw	r20, r24
    17be:	bd 01       	movw	r22, r26
    17c0:	cf 01       	movw	r24, r30
    17c2:	08 95       	ret

000017c4 <__umulhisi3>:
    17c4:	a2 9f       	mul	r26, r18
    17c6:	b0 01       	movw	r22, r0
    17c8:	b3 9f       	mul	r27, r19
    17ca:	c0 01       	movw	r24, r0
    17cc:	a3 9f       	mul	r26, r19
    17ce:	70 0d       	add	r23, r0
    17d0:	81 1d       	adc	r24, r1
    17d2:	11 24       	eor	r1, r1
    17d4:	91 1d       	adc	r25, r1
    17d6:	b2 9f       	mul	r27, r18
    17d8:	70 0d       	add	r23, r0
    17da:	81 1d       	adc	r24, r1
    17dc:	11 24       	eor	r1, r1
    17de:	91 1d       	adc	r25, r1
    17e0:	08 95       	ret

000017e2 <_exit>:
    17e2:	f8 94       	cli

000017e4 <__stop_program>:
    17e4:	ff cf       	rjmp	.-2      	; 0x17e4 <__stop_program>
